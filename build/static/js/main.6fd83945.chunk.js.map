{"version":3,"sources":["components/Button.js","components/Header.js","components/Task.js","components/Tasks.js","components/AddTask.js","App.js","reportWebVitals.js","index.js"],"names":["Button","text","color","onClickFunction","onClick","style","backgroundColor","className","Header","toggleAdd","buttonColorDecider","Task","task","onDelete","toggleReminder","reminder","onDoubleClick","id","cursor","day","Tasks","tasks","map","AddText","onAdd","useState","setText","setDay","setReminder","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","name","checked","currentTarget","App","setTasks","showAddButton","setshowAddButton","useEffect","a","fetchTasks","TasksFromServer","getTasks","fetch","response","json","AddTask","TaskAdded","Math","floor","random","newTask","length","filter","FilteredTask","ReminderTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fd83945.chunk.js","sourcesContent":["\n// Catch toggleAdd function (called onClickFunction here) from Header.js\nconst Button = function( {text, color, onClickFunction} )\n{\n    return (\n        <button\n            onClick = {onClickFunction}             // When button is clicked, execute toggleAdd() function which originates from App.js\n            style = {{backgroundColor : color}}     // toggleAdd function will invert showAddButton in App.js, which in turn affects Form visibility\n            className = 'btn'\n        >\n            {text}\n        </button>\n    )\n}\n\nexport default Button","// JSX return is wrapped in (), and remember that it can only return one Parent Element\nimport Button from './Button'\n\n// Catch toggleAdd function prop from App.js\nconst Header = function( {toggleAdd, buttonColorDecider} )\n{\n    return (\n        <header className = 'header'>\n            <h1> Task Tracker </h1>\n            <Button\n                color = { buttonColorDecider ? 'red' : 'green' }\n                text = { buttonColorDecider ? 'Done adding Tasks' : 'Start adding Tasks' }\n                onClickFunction = {toggleAdd}      // Pass down toggleAdd function to Button.js as a Prop\n            />\n        </header>\n    )\n}\n\n// What are you exposing to others that import this file?\nexport default Header","\nimport {FaTimes} from 'react-icons/fa'  // Importing Icons from installed React Icons Library. Restart npm server after installing!\n\n// Destructuring task, that was passed in as Prop from Tasks.js\n// Destructuring onDelete, that was passed in as Prop from Tasks.js\n\n/* Events are stored in App.js, so how to modify the component when we click on it?\n- We could access the State within our components, if we were using Redux/Context\n- Alternatively, we could use Props. Send down a function as a Prop, then fire that function off here in Task.js\n  State gets passed down, Actions get passed up\n */\n\nconst Task = function({task, onDelete, toggleReminder})\n{\n    return(\n        <div\n            /* first className is task */\n            /* second classname is using template literals (backticks) */\n            className = { `task ${ task.reminder ? 'reminder' : ' '}`}\n            onDoubleClick = { () => toggleReminder((task.id)) }    /* onDoubleClick on div, not header (Button) */\n        >\n            <h3>\n                {task.text}\n                <FaTimes\n                    style = {{ color : 'red', cursor : 'pointer'}}   /* Use double braces for Style */\n                    onClick = { () => onDelete(task.id) }             /* Pass in the task.id as well! */\n                    /* onClick will cause onDelete to work it's way up to App.js, where it will call deleteTask */\n                />\n            </h3>\n            <p> {task.day} </p>\n        </div>\n    )\n}\n\nexport default Task","import Task from './Task'\n\n// Destructuring tasks passed in from App.js\n// Destructuring onDelete passed in from App.js\nconst Tasks = function( {tasks, onDelete, toggleReminder} )\n{\n    return(\n        <>\n            {\n                tasks.map(           /* For each index in tasks Object Array, run the function defined below on each index*/\n                    (task) => (      /* task is the 'val' argument for .map function */\n                        /* Function returns a user-defined Task Component */\n                        <Task\n                            key = {task.id}       /* Store each task.id into key variable */\n                            task = {task}         /* Pass in task as Prop into Task.js, using variable task */\n                            onDelete = {onDelete} /* Pass in onDelete as Prop into Task.js, using variable onDelete*/\n                            toggleReminder = {toggleReminder}\n                        />\n                    )\n                )\n            }\n        </>\n    )\n}\n\nexport default Tasks\n","// Each input will have it's own COMPONENT level state, not APP level state\nimport {useState} from 'react'\n\n// AddText function catches onAdd Prop, that was passed in by App.js\n// AddText has it's own onSubmitFunction, that triggers when onSubmit EVENT triggers.\n// State Variables here MUST share the same name as State Variables in App.js\nconst AddText = function( {onAdd} )\n{\n    const[text, setText] = useState('')\n    const[day, setDay] = useState('')\n    const[reminder, setReminder] = useState(false)\n\n\n    // Logic when User clicks 'Submit'\n    const onSubmitFunction = function(e)    // Input is the Event currently happening (which will be the event that triggers onSubmit)\n    {\n        e.preventDefault()  // Prevents submission to a new webpage\n\n        // Pop-up if User did not enter Text, and clicked submit\n        if (!text)\n        {\n            alert('Enter a Task!')\n        }\n        else   // If everything ok, capture the data\n        {\n            // Call the onAdd function, passing in the appropriate inputs\n            // Inputs would have already been captured in Stateful Value (as the User was typing it in), hence just capture that\n            onAdd( { text,day,reminder} )\n\n            // Clear the form from whatever the User typed in just now\n            // Define (reuse) the State Hook functions, to modify the Stateful Value\n            setText('')\n            setDay('')\n            setReminder(false)\n        }\n    }\n\n    return(\n        <form className = 'add-form' onSubmit = {onSubmitFunction}>\n\n            <div className = 'form-control'>\n                <label> Task </label>\n                <input type = 'text'\n                       placeholder = 'Add Task'\n                       value = {text}\n                       onChange = { (e) => setText(e.target.value) }\n                />\n            </div>\n\n            <div className = 'form-control'>\n                <label> Date and Time </label>\n                <input type='text'\n                       placeholder = 'Enter Date and Time'\n                       value = {day}\n                       onChange = { (e) => setDay(e.target.value) }\n                />\n            </div>\n\n            <div className = 'form-control form-control-check'>  {/* Input multiple classes by using Quotations, can use String Template also */}\n                <label> Reminders </label>\n                <input type='checkbox'\n                       name='Reminders'\n                       value = {reminder}\n                       checked = {reminder} // Iff reminder is true, then box will be checked\n                       onChange = { (e) => setReminder(e.currentTarget.checked) }\n                />\n            </div>\n\n            <input type = 'submit' value = 'Save Task' className = 'btn btn-block' />\n        </form>\n    )\n}\n\nexport default AddText","import Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport {useState} from 'react'\nimport {useEffect} from 'react'   // Deals with side-effects, Component needs to do something AFTER rendering\n\n// Components can be Functions (with hooks) or Classes\nfunction App() {\n\n// App (Global) State.\n// Not best practice, will use Redux to keep track of JS States in future\n\n    // tasks is RETURNED stateful value, default will be initialState (when event not triggered yet)\n    // setTasks is function to change State. Reusable in different contexts\n    // initialize useState to default value as seen below\n    const [tasks, setTasks] = useState([])      // Fetch data from db.json, so empty brackets here\n    const [showAddButton, setshowAddButton] = useState(false)\n\n    // UseEffect function. Input is the function you passed in (the effect you want to create).\n    // React will call this function after the DOM updates\n    useEffect( () => {\n        // First Argument of useEffect (the function that causes the Effect)\n        const getTasks = async() => {\n               const TasksFromServer = await(fetchTasks())\n               fetchTasks(TasksFromServer)\n        }\n        // STILl the first argument of useEffect, but now another function (fetching Tasks from Backend)\n        getTasks()\n        },\n\n        // Second Argument of useEffect\n        []  // Optional Dependency Array (2nd argument of useEffect). Effect will only execute when value here is different from previous update\n    )\n\n    // fetchTasks (from Server) function, declared outside so that we can reuse it in other places\n    const fetchTasks = async() => {                                           // async keyword, put infront of function keyword to turn it into async function// Invoking the async function now, returns a promise (async function return values guaranteed to be promises)\n        // We use asynchronous function here as HTTP requests take alot of time, so the function will run in the background (it won't pause execution of entire programme)\n        // It is similar to non-blocking assignment in Verilog\n\n        // await keyword only works inside async functions\n        // await can be put infront of any async promise-based function, to pause code on that line until the promise fufills, then it returns the resulting value\n        const response = await fetch('http://localhost:5000/tasks')   // Fetches resources from a Network Location\n        const data = await response.json()    // When exchanging data between browser and server, the data can only be text. JSON servers as intermediary.\n                                              // Can replace with any backend here, to fetch data\n    }\n\n        // Function to toggle Reminders on Task\n    const toggleReminder = (id) =>\n    {\n        setTasks( tasks.map(\n            (ReminderTasks) => (\n                ReminderTasks.id === id ?\n                    {\n                        ...ReminderTasks, reminder : !ReminderTasks.reminder    // Rest Operator\n                    } : ReminderTasks\n            )\n        ))\n    }\n\n    // Function to add Task\n    // Input TaskAdded does not need to be explicitly defined in App.js (it is just a placeholder, like C)\n    // TaskAdded input is dependent on AddTask.js (it is task, date, reminder)\n    const onAdd = (TaskAdded) =>\n    {\n        // Without a database, we will simply use RNG to store the different Tasks\n        const id = Math.floor(Math.random() * 10000) + 1\n\n        // Create an Object representing newly added Task, using spread operator for TaskAdded (containing text,day,reminder)\n        const newTask = {id, ...TaskAdded}\n\n        // Define (reuse) the setTasks function to include the new task\n        // Copy over the pre-existing TASKS (the Stateful Value above)\n        // Append newTask to it\n        setTasks( [...tasks, newTask])\n    }\n\n    // Function to delete Task (known as deleteTask in Tasks.js / Task.js, since that is what we called it as a Prop)\n    const deleteTask = (id) =>    // Arrow Notation, taking in id as input\n    {\n        setTasks( tasks.filter( (FilteredTask) => FilteredTask.id !== id ) )\n    }\n\n  // Return is JSX, not HTML\n  // Can only return one single Parent Element\n\n  /* Pass in deleteTask function as Prop, to Tasks.js\n     - Tasks.js contains Task.js\n     - Task.js contains the button itself, that is the trigger point for deletion\n\n     Pass in addTask function as Prop, to AddTask.js\n   */\n  return (\n    <div className = 'container'>\n\n        <Header\n            buttonColorDecider = {showAddButton}\n            toggleAdd = { () => setshowAddButton(!showAddButton) }/>      {/* Button is in <Header>, so we must pass down the State Hook function as a Prop. We also define the State Hook function here */}\n        {showAddButton ? <AddTask onAdd = {onAdd}/> : ''}                 {/* Event Handlers must be function or function reference, for setshowAddButton*/}\n        {\n           tasks.length !== 0 ?\n               (\n                   <Tasks\n                       tasks = {tasks}         /* Passing in tasks as Prop */\n                       onDelete = {deleteTask} /* Passing in deleteTask (FUNCTION) as Prop, into variable onDelete */\n                       toggleReminder = {toggleReminder}\n                   />\n               )\n               :\n               'No Tasks Today!'\n        }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';   // App JS contains root component. (every component that we create, will be in this main root app component)\nimport reportWebVitals from './reportWebVitals';\n\n\n// Inserting app from App.js, into root ID element\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}