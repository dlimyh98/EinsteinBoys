{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport Footer from './components/Footer';\nimport { useState } from 'react';\nimport { useEffect } from 'react'; // Deals with side-effects, Component needs to do something AFTER rendering\n\nimport Authentication from './components/Authentication';\nimport Axios from \"axios\"; // Components can be Functions (with hooks) or Classes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // App (Global) State.\n  // Not best practice, will use Redux to keep track of JS States in future\n  // tasks is RETURNED stateful value, default will be initialState (when event not triggered yet)\n  // setTasks is function to change State. Reusable in different contexts\n  // initialize useState to default value as seen below\n  const [tasks, setTasks] = useState([]); // Fetch data from db.json, so empty brackets here\n\n  const [showAddButton, setshowAddButton] = useState(false); // UseEffect function. Input is the function you passed in (the effect you want to create).\n  // React will call this function after the DOM updates\n\n  useEffect(() => {\n    // First Argument of useEffect (the function that causes the Effect)\n    const getTasks = async () => {\n      const TasksFromServer = await fetchTasks(); // Fetch tasks from Backend Server (Port 5000)\n\n      setTasks(TasksFromServer); // Update on GUI using State Hook function\n    }; // Actually run getTasks(), whatever was above is just a definition\n\n\n    getTasks();\n  }, // Second Argument of useEffect\n  [] // Optional Dependency Array (2nd argument of useEffect). Effect will only execute when value here is different from previous update\n  ); // fetchTasks (from Server) function, declared outside so that we can reuse it in other places\n\n  const fetchTasks = async () => {\n    // async keyword, put infront of function keyword to turn it into async function// Invoking the async function now, returns a promise (async function return values guaranteed to be promises)\n    // We use asynchronous function here as HTTP requests take alot of time, so the function will run in the background (it won't pause execution of entire programme)\n    // It is similar to non-blocking assignment in Verilog\n    // await keyword only works inside async functions\n    // await can be put infront of any async promise-based function, to pause code on that line until the promise fufills, then it returns the resulting value\n    const response = await fetch('http://localhost:5000/tasks'); // Fetches resources from a Network Location\n\n    const data = await response.json(); // When exchanging data between browser and server, the data can only be text. JSON servers as intermediary.\n    // Can replace with any backend here, to fetch data\n    // Return the data for handling\n\n    return data;\n  };\n\n  const fetchSpecificTask = async id => {\n    const response = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await response.json();\n    return data;\n  }; // Function to toggle Reminders on Task\n  // Supports Backend Integration as well\n\n\n  const toggleReminder = async id => {\n    // Fetch SPECIFIC DATA from Backend, (which task needs it's reminder to be toggled?)\n    const TaskToToggle = await fetchSpecificTask(id); // Update the SPECIFIC DATA that has just been fetched\n    // 1. Use Spread Operator to copy over fetched data\n    // 2. Accessing the reminder field, change it to the opposite of JUST FETCHED DATA'S REMINDER! In this case it is TaskToToggle\n\n    const updatedTaskToToggle = { ...TaskToToggle,\n      reminder: !TaskToToggle.reminder\n    }; // Push the Updated Data onto Backend Server\n\n    const response = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updatedTaskToToggle)\n    });\n    const data = await response.json(); // Reflect updated Data on UI\n\n    setTasks(tasks.map(ReminderTasks => // ReminderTasks is the \"placeholder\" for the current element, as you iterate through List\n    ReminderTasks.id === id ? { ...ReminderTasks,\n      reminder: data.reminder // Rest Operator\n\n    } : ReminderTasks));\n  };\n\n  const onAdd = TaskAdded => {\n    Axios({\n      method: \"POST\",\n      data: TaskAdded,\n      withCredentials: true,\n      url: \"http://localhost:4000/tasks\"\n    }).then(res => {\n      setTasks([...tasks, TaskAdded]);\n    });\n  };\n\n  const deleteTask = async taskID => {\n    Axios({\n      method: \"DELETE\",\n      data: taskID,\n      withCredentials: true,\n      url: \"http://localhost:4000/tasks\"\n    });\n  }; // Function to delete Task (known as deleteTask in Tasks.js / Task.js, since that is what we called it as a Prop)\n  // Supports additional functionality (deleting Task from Backend db.json Database as well)\n\n  /*const deleteTask = async(id) => {\n      // DELETE request from Backend Server, this causes db.json to be modified also!\n      await fetch(`http://localhost:5000/tasks/${id}` ,{method : 'DELETE'} )  // Note backticks and String Template\n      // Delete from UI\n      setTasks( tasks.filter( (FilteredTask) => FilteredTask.id !== id ) )\n  }*/\n\n\n  const [isAuth, setisAuth] = useState(false); // Return is JSX, not HTML\n  // Can only return one single Parent Element\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isAuth && /*#__PURE__*/_jsxDEV(Authentication, {\n      setisAuth: setisAuth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 23\n    }, this), isAuth && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        buttonColorDecider: showAddButton,\n        toggleAdd: () => setshowAddButton(!showAddButton)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 19\n      }, this), \" \", showAddButton ? /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: onAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 36\n      }, this) : '', \" \", tasks.length !== 0 ?\n      /*#__PURE__*/\n\n      /* Pass in deleteTask function as Prop, to Tasks.js\n         - Tasks.js contains Task.js\n         - Task.js contains the button itself, that is the trigger point for deletion\n         Pass in addTask function as Prop, to AddTask.js\n       */\n      _jsxDEV(Tasks, {\n        tasks: tasks\n        /* Passing in tasks as Prop */\n        ,\n        onDelete: deleteTask\n        /* Passing in deleteTask (FUNCTION) as Prop, into variable onDelete */\n        ,\n        toggleReminder: toggleReminder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 31\n      }, this) : 'No Tasks Today!', /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"fWU9oSie7raVnjdbIhOrXMzi9OI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/App.js"],"names":["Header","Tasks","AddTask","Footer","useState","useEffect","Authentication","Axios","App","tasks","setTasks","showAddButton","setshowAddButton","getTasks","TasksFromServer","fetchTasks","response","fetch","data","json","fetchSpecificTask","id","toggleReminder","TaskToToggle","updatedTaskToToggle","reminder","method","headers","body","JSON","stringify","map","ReminderTasks","onAdd","TaskAdded","withCredentials","url","then","res","deleteTask","taskID","isAuth","setisAuth","length"],"mappings":"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","sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport Footer from './components/Footer'\nimport {useState} from 'react'\nimport {useEffect} from 'react'   // Deals with side-effects, Component needs to do something AFTER rendering\nimport Authentication from './components/Authentication'\nimport Axios from \"axios\"\n\n// Components can be Functions (with hooks) or Classes\nfunction App() {\n\n// App (Global) State.\n// Not best practice, will use Redux to keep track of JS States in future\n\n    // tasks is RETURNED stateful value, default will be initialState (when event not triggered yet)\n    // setTasks is function to change State. Reusable in different contexts\n    // initialize useState to default value as seen below\n    const [tasks, setTasks] = useState([])\n         // Fetch data from db.json, so empty brackets here\n    const [showAddButton, setshowAddButton] = useState(false)\n\n    // UseEffect function. Input is the function you passed in (the effect you want to create).\n    // React will call this function after the DOM updates\n    useEffect( () => {\n        // First Argument of useEffect (the function that causes the Effect)\n        const getTasks = async() => {\n               const TasksFromServer = await(fetchTasks())          // Fetch tasks from Backend Server (Port 5000)\n               setTasks(TasksFromServer)                            // Update on GUI using State Hook function\n        }\n\n        // Actually run getTasks(), whatever was above is just a definition\n        getTasks()\n        },\n\n        // Second Argument of useEffect\n        []  // Optional Dependency Array (2nd argument of useEffect). Effect will only execute when value here is different from previous update\n    )\n\n    // fetchTasks (from Server) function, declared outside so that we can reuse it in other places\n    const fetchTasks = async() => {                                           // async keyword, put infront of function keyword to turn it into async function// Invoking the async function now, returns a promise (async function return values guaranteed to be promises)\n        // We use asynchronous function here as HTTP requests take alot of time, so the function will run in the background (it won't pause execution of entire programme)\n        // It is similar to non-blocking assignment in Verilog\n\n        // await keyword only works inside async functions\n        // await can be put infront of any async promise-based function, to pause code on that line until the promise fufills, then it returns the resulting value\n        const response = await fetch('http://localhost:5000/tasks')   // Fetches resources from a Network Location\n        const data = await response.json()    // When exchanging data between browser and server, the data can only be text. JSON servers as intermediary.\n                                              // Can replace with any backend here, to fetch data\n        // Return the data for handling\n        return data\n    }\n\n    const fetchSpecificTask = async(id) => {\n        const response = await fetch(`http://localhost:5000/tasks/${id}`)\n        const data = await response.json()\n        return data\n    }\n\n    // Function to toggle Reminders on Task\n    // Supports Backend Integration as well\n    const toggleReminder = async (id) =>\n    {\n        // Fetch SPECIFIC DATA from Backend, (which task needs it's reminder to be toggled?)\n        const TaskToToggle = await fetchSpecificTask(id)\n\n        // Update the SPECIFIC DATA that has just been fetched\n        // 1. Use Spread Operator to copy over fetched data\n        // 2. Accessing the reminder field, change it to the opposite of JUST FETCHED DATA'S REMINDER! In this case it is TaskToToggle\n        const updatedTaskToToggle = {...TaskToToggle, reminder : !TaskToToggle.reminder }\n\n        // Push the Updated Data onto Backend Server\n        const response = await fetch(`http://localhost:5000/tasks/${id}`, {\n            method : 'PUT',\n            headers : { 'Content-type' : 'application/json',},\n            body : JSON.stringify(updatedTaskToToggle),\n            }\n        )\n\n        const data = await response.json()\n\n        // Reflect updated Data on UI\n        setTasks( tasks.map(\n            (ReminderTasks) => (            // ReminderTasks is the \"placeholder\" for the current element, as you iterate through List\n                ReminderTasks.id === id ?\n                    {\n                        ...ReminderTasks, reminder : data.reminder    // Rest Operator\n                    } : ReminderTasks\n            )\n        ))\n    }\n\n    const onAdd = (TaskAdded) => {\n        Axios({\n            method : \"POST\",\n            data : TaskAdded,\n            withCredentials : true,\n            url: \"http://localhost:4000/tasks\",\n        }).then((res) => {\n            setTasks([...tasks, TaskAdded])\n        })\n    }\n\n    const deleteTask = async(taskID) => {\n        Axios({\n            method : \"DELETE\",\n            data : taskID,\n            withCredentials : true,\n            url : \"http://localhost:4000/tasks\",\n        })\n    }\n\n    // Function to delete Task (known as deleteTask in Tasks.js / Task.js, since that is what we called it as a Prop)\n    // Supports additional functionality (deleting Task from Backend db.json Database as well)\n    /*const deleteTask = async(id) => {\n        // DELETE request from Backend Server, this causes db.json to be modified also!\n        await fetch(`http://localhost:5000/tasks/${id}` ,{method : 'DELETE'} )  // Note backticks and String Template\n        // Delete from UI\n        setTasks( tasks.filter( (FilteredTask) => FilteredTask.id !== id ) )\n    }*/\n\n    const [isAuth, setisAuth] = useState(false)\n  // Return is JSX, not HTML\n  // Can only return one single Parent Element\n  return (\n      <>\n          {!isAuth && <Authentication setisAuth = {setisAuth} />}\n\n          {isAuth &&\n              <div className='container'>\n                  <Header\n                      buttonColorDecider={showAddButton}\n                      toggleAdd={() => setshowAddButton(!showAddButton)}\n                  /> {/* Button is in <Header>, so we must pass down the State Hook function as a Prop. We also define the State Hook function here */}\n\n                  {showAddButton ? <AddTask\n                      onAdd={onAdd}/> : ''} {/* Event Handlers must be function or function reference, for setshowAddButton*/}\n                  {\n                      tasks.length !== 0 ?\n                          (\n                              /* Pass in deleteTask function as Prop, to Tasks.js\n                                 - Tasks.js contains Task.js\n                                 - Task.js contains the button itself, that is the trigger point for deletion\n                                 Pass in addTask function as Prop, to AddTask.js\n                               */\n                              <Tasks\n                                  tasks={tasks}         /* Passing in tasks as Prop */\n                                  onDelete={deleteTask} /* Passing in deleteTask (FUNCTION) as Prop, into variable onDelete */\n                                  toggleReminder={toggleReminder}\n                              />\n                          )\n                          :\n                          'No Tasks Today!'\n                  }\n\n                  <Footer/>\n\n              </div>\n          }\n          </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}