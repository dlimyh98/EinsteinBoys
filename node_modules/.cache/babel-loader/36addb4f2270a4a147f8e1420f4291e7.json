{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/components/AddTask.js\",\n    _s = $RefreshSig$();\n\n// Each input will have it's own COMPONENT level state, not APP level state\nimport { useState } from 'react'; // AddText function catches onAdd Prop, that was passed in by App.js\n// AddText has it's own onSubmitFunction, that triggers when onSubmit EVENT triggers.\n// State Variables here MUST share the same name as State Variables in App.js\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddText = function ({\n  onAdd\n}) {\n  _s();\n\n  const [text, setText] = useState('');\n  const [day, setDay] = useState('');\n  const [reminder, setReminder] = useState(false); // Logic when User clicks 'Submit'\n\n  const onSubmitFunction = function (e) // Input is the Event currently happening (which will be the event that triggers onSubmit)\n  {\n    e.preventDefault(); // Prevents submission to a new webpage\n    // Pop-up if User did not enter Text, and clicked submit\n\n    if (!text) {\n      alert('Enter a Task!');\n    } else // If everything ok, capture the data\n      {\n        // Call the onAdd function, passing in the appropriate inputs\n        // Inputs would have already been captured in Stateful Value (as the User was typing it in), hence just capture that\n        onAdd({\n          text,\n          day,\n          reminder\n        }); // Clear the form from whatever the User typed in just now\n        // Define (reuse) the State Hook functions, to modify the Stateful Value\n\n        setText('');\n        setDay('');\n        setReminder(false);\n      }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"add-form\",\n    onSubmit: onSubmitFunction,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Task \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Add Task\",\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Date and Time \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Date and Time\",\n        value: day,\n        onChange: e => setDay(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control form-control-check\",\n      children: [\"  \", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Reminders \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        name: \"Reminders\",\n        value: reminder,\n        checked: reminder // Iff reminder is true, then box will be checked\n        ,\n        onChange: e => setReminder(e.currentTarget.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Priority \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Save Task\",\n      className: \"btn btn-block\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddText, \"Aj+4+2kaTLo6CjtAhOIEiZmPaGE=\");\n\n_c = AddText;\nexport default AddText;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddText\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/components/AddTask.js"],"names":["useState","AddText","onAdd","text","setText","day","setDay","reminder","setReminder","onSubmitFunction","e","preventDefault","alert","target","value","currentTarget","checked"],"mappings":"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","sourcesContent":["// Each input will have it's own COMPONENT level state, not APP level state\nimport {useState} from 'react'\n\n// AddText function catches onAdd Prop, that was passed in by App.js\n// AddText has it's own onSubmitFunction, that triggers when onSubmit EVENT triggers.\n// State Variables here MUST share the same name as State Variables in App.js\nconst AddText = function( {onAdd} )\n{\n    const[text, setText] = useState('')\n    const[day, setDay] = useState('')\n    const[reminder, setReminder] = useState(false)\n\n\n    // Logic when User clicks 'Submit'\n    const onSubmitFunction = function(e)    // Input is the Event currently happening (which will be the event that triggers onSubmit)\n    {\n        e.preventDefault()  // Prevents submission to a new webpage\n\n        // Pop-up if User did not enter Text, and clicked submit\n        if (!text)\n        {\n            alert('Enter a Task!')\n        }\n        else   // If everything ok, capture the data\n        {\n            // Call the onAdd function, passing in the appropriate inputs\n            // Inputs would have already been captured in Stateful Value (as the User was typing it in), hence just capture that\n            onAdd( {text,day,reminder} )\n\n            // Clear the form from whatever the User typed in just now\n            // Define (reuse) the State Hook functions, to modify the Stateful Value\n            setText('')\n            setDay('')\n            setReminder(false)\n        }\n    }\n\n    return(\n        <form className = 'add-form' onSubmit = {onSubmitFunction}>\n\n            <div className = 'form-control'>\n                <label> Task </label>\n                <input type = 'text'\n                       placeholder = 'Add Task'\n                       value = {text}\n                       onChange = { (e) => setText(e.target.value) }\n                />\n            </div>\n\n            <div className = 'form-control'>\n                <label> Date and Time </label>\n                <input type='text'\n                       placeholder = 'Enter Date and Time'\n                       value = {day}\n                       onChange = { (e) => setDay(e.target.value) }\n                />\n            </div>\n\n            <div className = 'form-control form-control-check'>  {/* Input multiple classes by using Quotations, can use String Template also */}\n                <label> Reminders </label>\n                <input type='checkbox'\n                       name='Reminders'\n                       value = {reminder}\n                       checked = {reminder} // Iff reminder is true, then box will be checked\n                       onChange = { (e) => setReminder(e.currentTarget.checked) }\n                />\n            </div>\n\n            <div>\n                <label> Priority </label>\n                <input type = 'checkbox' \n\n                    />\n            </div>\n\n            <input type = 'submit' value = 'Save Task' className = 'btn btn-block' />\n        </form>\n    )\n}\n\nexport default AddText"]},"metadata":{},"sourceType":"module"}