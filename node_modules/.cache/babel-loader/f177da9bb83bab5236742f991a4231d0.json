{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/components/Task.js\";\nimport { FaTimes } from 'react-icons/fa'; // Importing Icons from installed React Icons Library. Restart npm server after installing!\n// Destructuring task, that was passed in as Prop from Tasks.js\n// Destructuring onDelete, that was passed in as Prop from Tasks.js\n\n/* Events are stored in App.js, so how to modify the component when we click on it?\n- We could access the State within our components, if we were using Redux/Context\n- Alternatively, we could use Props. Send down a function as a Prop, then fire that function off here in Task.js\n  State gets passed down, Actions get passed up\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Task = function ({\n  task,\n  onDelete,\n  toggleReminder,\n  settaskCross\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    /* first className is task */\n\n    /* second classname is using template literals (backticks) */\n    className: `task ${task.reminder ? 'reminder' : ' '}`,\n    onDoubleClick: () => toggleReminder(task.id)\n    /* onDoubleClick on div, not header (Button) */\n    ,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [task.text, /*#__PURE__*/_jsxDEV(FaTimes, {\n        style: {\n          color: 'red',\n          cursor: 'pointer'\n        }\n        /* Use double braces for Style */\n        ,\n        settaskCross: true,\n        onClick: () => onDelete(task._id)\n        /* Pass in the task.text as well! */\n\n        /* onClick will cause onDelete to work it's way up to App.js, where it will call deleteTask */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", task.day, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/components/Task.js"],"names":["FaTimes","Task","task","onDelete","toggleReminder","settaskCross","reminder","id","text","color","cursor","_id","day"],"mappings":";AAAA,SAAQA,OAAR,QAAsB,gBAAtB,C,CAAwC;AAExC;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,IAAI,GAAG,UAAS;AAACC,EAAAA,IAAD;AAAOC,EAAAA,QAAP;AAAiBC,EAAAA,cAAjB;AAAiCC,EAAAA;AAAjC,CAAT,EACb;AACI,sBACI;AACI;;AACA;AACA,IAAA,SAAS,EAAM,QAAQH,IAAI,CAACI,QAAL,GAAgB,UAAhB,GAA6B,GAAI,EAH5D;AAII,IAAA,aAAa,EAAK,MAAMF,cAAc,CAAEF,IAAI,CAACK,EAAP;AAAiB;AAJ3D;AAAA,4BAMI;AAAA,iBACKL,IAAI,CAACM,IADV,eAEI,QAAC,OAAD;AACI,QAAA,KAAK,EAAI;AAAEC,UAAAA,KAAK,EAAG,KAAV;AAAiBC,UAAAA,MAAM,EAAG;AAA1B;AAAwC;AADrD;AAEI,QAAA,YAAY,MAFhB;AAII,QAAA,OAAO,EAAK,MAAMP,QAAQ,CAACD,IAAI,CAACS,GAAN;AAAyB;;AACnD;;AALJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAgBI;AAAA,sBAAKT,IAAI,CAACU,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAtBD;;KAAMX,I;AAwBN,eAAeA,IAAf","sourcesContent":["import {FaTimes} from 'react-icons/fa'  // Importing Icons from installed React Icons Library. Restart npm server after installing!\n\n// Destructuring task, that was passed in as Prop from Tasks.js\n// Destructuring onDelete, that was passed in as Prop from Tasks.js\n\n/* Events are stored in App.js, so how to modify the component when we click on it?\n- We could access the State within our components, if we were using Redux/Context\n- Alternatively, we could use Props. Send down a function as a Prop, then fire that function off here in Task.js\n  State gets passed down, Actions get passed up\n */\n\nconst Task = function({task, onDelete, toggleReminder, settaskCross})\n{\n    return(\n        <div\n            /* first className is task */\n            /* second classname is using template literals (backticks) */\n            className = { `task ${ task.reminder ? 'reminder' : ' '}`}\n            onDoubleClick = { () => toggleReminder((task.id)) }    /* onDoubleClick on div, not header (Button) */\n        >\n            <h3>\n                {task.text}\n                <FaTimes\n                    style = {{ color : 'red', cursor : 'pointer'}}   /* Use double braces for Style */\n                    settaskCross\n\n                    onClick = { () => onDelete(task._id) }             /* Pass in the task.text as well! */\n                    /* onClick will cause onDelete to work it's way up to App.js, where it will call deleteTask */\n                />\n            </h3>\n            <p> {task.day} </p>\n        </div>\n    )\n}\n\nexport default Task"]},"metadata":{},"sourceType":"module"}