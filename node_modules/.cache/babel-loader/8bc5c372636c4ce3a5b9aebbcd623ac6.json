{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react'; // Custom Hook to alert React that token retrieval was successful, by triggering a re-render when data changes\n\nconst useToken = function () {\n  _s();\n\n  // Retrieve token to render correct page\n  const retrieveToken = () => {\n    const userTokenRetrievedString = sessionStorage.getItem('userTokenStored'); // Retrieve token using Key\n\n    const userTokenRetrieved = JSON.parse(userTokenRetrievedString); // Convert to JSON\n\n    return userTokenRetrieved === null || userTokenRetrieved === void 0 ? void 0 : userTokenRetrieved.userTokenStoredKey; // Chaining operator, since userTokenStoredKey is invalid for first session\n  }; // State initialised with retrieveToken\n\n\n  const [userTokenStored, setToken] = useState(retrieveToken()); // useState here triggers re-render\n  // Session Storage (for Authentication) + updating State\n  // storedToken is placeholder for function below it\n\n  const storedToken = userToken => {\n    sessionStorage.setItem('userTokenStored', JSON.stringify(userToken)); // Saving to Session Storage\n\n    setToken(userToken); // Updating Stateful Value\n  }; // Return an Object\n  // setToken is JUST A NAME, it is a field containing userTokenStored (Stateful token value) and storedToken (function)\n\n\n  return {\n    userTokenStored //setToken : storedToken, userTokenStored\n\n  };\n};\n\n_s(useToken, \"eC0aZZw7JBTsMOrSxOIWcsOkZAc=\");\n\nexport default useToken;","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/components/AuthPage/useToken.js"],"names":["useState","useToken","retrieveToken","userTokenRetrievedString","sessionStorage","getItem","userTokenRetrieved","JSON","parse","userTokenStoredKey","userTokenStored","setToken","storedToken","userToken","setItem","stringify"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,YAAW;AAAA;;AAExB;AACA,QAAMC,aAAa,GAAG,MAAM;AACxB,UAAMC,wBAAwB,GAAGC,cAAc,CAACC,OAAf,CAAuB,iBAAvB,CAAjC,CADwB,CACuD;;AAC/E,UAAMC,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWL,wBAAX,CAA3B,CAFwB,CAE+D;;AACvF,WAAOG,kBAAP,aAAOA,kBAAP,uBAAOA,kBAAkB,CAAEG,kBAA3B,CAHwB,CAGwB;AACnD,GAJD,CAHwB,CASxB;;;AACA,QAAK,CAACC,eAAD,EAAkBC,QAAlB,IAA8BX,QAAQ,CAACE,aAAa,EAAd,CAA3C,CAVwB,CAUwC;AAEhE;AACA;;AACA,QAAMU,WAAW,GAAIC,SAAD,IAAe;AAC/BT,IAAAA,cAAc,CAACU,OAAf,CAAuB,iBAAvB,EAA0CP,IAAI,CAACQ,SAAL,CAAeF,SAAf,CAA1C,EAD+B,CACwC;;AACvEF,IAAAA,QAAQ,CAACE,SAAD,CAAR,CAF+B,CAEwC;AAC1E,GAHD,CAdwB,CAmBxB;AACA;;;AACA,SAAO;AACHH,IAAAA,eADG,CAEH;;AAFG,GAAP;AAMH,CA3BD;;GAAMT,Q;;AA6BN,eAAeA,QAAf","sourcesContent":["import {useState} from 'react'\n\n// Custom Hook to alert React that token retrieval was successful, by triggering a re-render when data changes\nconst useToken = function() {\n\n    // Retrieve token to render correct page\n    const retrieveToken = () => {\n        const userTokenRetrievedString = sessionStorage.getItem('userTokenStored')     // Retrieve token using Key\n        const userTokenRetrieved = JSON.parse(userTokenRetrievedString)                        // Convert to JSON\n        return userTokenRetrieved?.userTokenStoredKey   // Chaining operator, since userTokenStoredKey is invalid for first session\n    }\n\n    // State initialised with retrieveToken\n    const[userTokenStored, setToken] = useState(retrieveToken())    // useState here triggers re-render\n\n    // Session Storage (for Authentication) + updating State\n    // storedToken is placeholder for function below it\n    const storedToken = (userToken) => {\n        sessionStorage.setItem('userTokenStored', JSON.stringify(userToken))   // Saving to Session Storage\n        setToken(userToken)                                                    // Updating Stateful Value\n    }\n\n    // Return an Object\n    // setToken is JUST A NAME, it is a field containing userTokenStored (Stateful token value) and storedToken (function)\n    return {\n        userTokenStored\n        //setToken : storedToken, userTokenStored\n    }\n\n\n}\n\nexport default useToken\n"]},"metadata":{},"sourceType":"module"}