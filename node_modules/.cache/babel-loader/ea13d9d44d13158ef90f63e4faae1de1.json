{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/components/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport format from \"date-fns/format\";\nimport subMonths from \"date-fns/subMonths\";\nimport startOfWeek from 'date-fns/startOfWeek';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport addDays from 'date-fns/addDays';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport isSameDay from 'date-fns/isSameDay';\nimport addMonths from 'date-fns/addMonths';\nimport toDate from 'date-fns/toDate';\nimport \"./Calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calendar = () => {\n  _s();\n\n  // Default State is current Day\n  const [currentDate, setCurrentDate] = useState(new Date()); // for Calendar to render proper month\n\n  const [selectedDate, setSelectedDate] = useState(new Date()); // styling for selected Date\n  // Add 1 to current Month\n\n  const nextMonth = () => {\n    setCurrentDate(addMonths(currentDate, 1));\n  }; // Deduct 1 from current Month\n\n\n  const prevMonth = () => {\n    setCurrentDate(subMonths(currentDate, 1));\n  }; // sets how Header (Month/Year) is displayed\n\n\n  const header = () => {\n    const dateFormat = \"MMMM yyyy\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header row flex-middle\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column col-start\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          onClick: prevMonth,\n          children: \"chevron_left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column col-center\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: format(currentDate, dateFormat)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column col-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          onClick: nextMonth,\n          children: \"chevron_right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  }; // sets how (Monday-Sunday) is displayed just below Header\n\n\n  const days = () => {\n    const dateFormat = \"E\";\n    const days = [];\n    let startDate = startOfWeek(currentDate); // use date-fns startOfWeek along with currentDate state\n    // For each iteration, push a <div> into days Array\n\n    for (let i = 1; i < 8; i++) {\n      // Mon-Sunday (1-8)\n      days.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column col-center\",\n        children: format(addDays(startDate, i), dateFormat)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days row\",\n      children: days\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 16\n    }, this);\n  }; // sets how EACH cell is populated\n\n\n  const cells = () => {\n    const monthStart = startOfMonth(currentDate); // when does month start\n\n    const monthEnd = endOfMonth(monthStart); // when does month end\n\n    const startDate = startOfWeek(monthStart); // gets first day of CURRENT month, for our calendar to display on that month\n\n    const endDate = endOfWeek(monthEnd); // final date of the CURRENT month, use as a check against\n\n    const dateFormat = \"d\"; // render correct date in each cell\n\n    const rows = []; // render all weeks of given month\n\n    let days = []; // render each day in the week\n\n    let day = startDate; // points to start date of CURRENT month\n\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      // Guarantees that loop runs for entirety of month\n      // For each iteration, push a single cell into days array\n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, dateFormat);\n        const cloneDay = day;\n        days.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `column cell ${!isSameMonth(day, monthStart) // Checking if each cell actually belongs to the current Month\n          ? \"disabled\" : isSameDay(day, selectedDate) ? \"selected\" : \"\"}` // Checking if particular cell is same date as currentDate\n          ,\n          onClick: () => onDateClick(toDate(cloneDay)),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"number\",\n            children: formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg\",\n            children: formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this));\n        day = addDays(day, 1);\n      } // Push the entire days array (as a single div) into rows array\n\n\n      rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [\" \", days, \" \"]\n      }, day, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)); // Clear the days array to start over for the next week\n\n      days = [];\n    } // Once while loop is done, return the full rows array as single div\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 16\n    }, this);\n  };\n\n  const onDateClick = day => {\n    setSelectedDate(day);\n  }; // Rendering\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: header()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: days()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: cells()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Calendar, \"Oy59gByGOD7N2IJvC5fpL6Rghk0=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/components/Calendar.js"],"names":["React","useState","format","subMonths","startOfWeek","endOfWeek","addDays","startOfMonth","endOfMonth","isSameMonth","isSameDay","addMonths","toDate","Calendar","currentDate","setCurrentDate","Date","selectedDate","setSelectedDate","nextMonth","prevMonth","header","dateFormat","days","startDate","i","push","cells","monthStart","monthEnd","endDate","rows","day","formattedDate","cloneDay","onDateClick"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport format from \"date-fns/format\"\nimport subMonths from \"date-fns/subMonths\"\nimport startOfWeek from 'date-fns/startOfWeek'\nimport endOfWeek from 'date-fns/endOfWeek'\nimport addDays from 'date-fns/addDays'\nimport startOfMonth from 'date-fns/startOfMonth'\nimport endOfMonth from 'date-fns/endOfMonth'\nimport isSameMonth from 'date-fns/isSameMonth'\nimport isSameDay from 'date-fns/isSameDay'\nimport addMonths from 'date-fns/addMonths'\nimport toDate from 'date-fns/toDate'\nimport \"./Calendar.css\";\n\nconst Calendar = () => {\n\n    // Default State is current Day\n    const [currentDate, setCurrentDate] = useState(new Date());     // for Calendar to render proper month\n    const [selectedDate, setSelectedDate] = useState(new Date());   // styling for selected Date\n\n    // Add 1 to current Month\n    const nextMonth = () => {\n        setCurrentDate(addMonths(currentDate, 1));\n    };\n\n    // Deduct 1 from current Month\n    const prevMonth = () => {\n        setCurrentDate(subMonths(currentDate, 1));\n    };\n\n    // sets how Header (Month/Year) is displayed\n    const header = () => {\n        const dateFormat = \"MMMM yyyy\";\n        return (\n\n            <div className=\"header row flex-middle\">\n                <div className=\"column col-start\">\n                    <div className=\"icon\" onClick={prevMonth}>\n                        chevron_left\n                    </div>\n                </div>\n\n                <div className=\"column col-center\">\n                    <span>{format(currentDate, dateFormat)}</span>\n                </div>\n\n                <div className=\"column col-end\">\n                    <div className=\"icon\" onClick={nextMonth}>\n                        chevron_right\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n\n    // sets how (Monday-Sunday) is displayed just below Header\n    const days = () => {\n        const dateFormat = \"E\";\n        const days = [];\n        let startDate = startOfWeek(currentDate);   // use date-fns startOfWeek along with currentDate state\n\n        // For each iteration, push a <div> into days Array\n        for (let i = 1; i < 8; i++) {   // Mon-Sunday (1-8)\n            days.push(\n                <div className=\"column col-center\" key={i}>\n                    {format(addDays(startDate, i), dateFormat)}\n                </div>\n            );\n        }\n        return <div className=\"days row\">{days}</div>;\n    };\n\n    // sets how EACH cell is populated\n    const cells = () => {\n        const monthStart = startOfMonth(currentDate);    // when does month start\n        const monthEnd = endOfMonth(monthStart);         // when does month end\n        const startDate = startOfWeek(monthStart);       // gets first day of CURRENT month, for our calendar to display on that month\n        const endDate = endOfWeek(monthEnd);             // final date of the CURRENT month, use as a check against\n        const dateFormat = \"d\";                          // render correct date in each cell\n        const rows = [];                                 // render all weeks of given month\n        let days = [];                                   // render each day in the week\n        let day = startDate;                             // points to start date of CURRENT month\n        let formattedDate = \"\";\n\n        while (day <= endDate) {              // Guarantees that loop runs for entirety of month\n            // For each iteration, push a single cell into days array\n            for (let i = 0; i < 7; i++) {\n                formattedDate = format(day, dateFormat);\n                const cloneDay = day;\n                days.push(\n                    <div\n                        className={`column cell ${!isSameMonth(day, monthStart)  // Checking if each cell actually belongs to the current Month\n                            ? \"disabled\" : isSameDay(day, selectedDate)\n                                ? \"selected\" : \"\" }`}                            // Checking if particular cell is same date as currentDate\n                        key={day}\n                        onClick={() => onDateClick(toDate(cloneDay))}\n                    >\n                        <span className=\"number\">{formattedDate}</span>\n                        <span className=\"bg\">{formattedDate}</span>\n                    </div>\n                );\n                day = addDays(day, 1);\n            }\n            // Push the entire days array (as a single div) into rows array\n            rows.push(\n                <div className=\"row\" key={day}> {days} </div>\n            );\n            // Clear the days array to start over for the next week\n            days = [];\n        }\n        // Once while loop is done, return the full rows array as single div\n        return <div className=\"body\">{rows}</div>;\n    }\n\n\n    const onDateClick = day => {\n        setSelectedDate(day);\n    }\n\n    // Rendering\n    return (\n        <div className=\"calendar\">\n            <div>{header()}</div>\n            <div>{days()}</div>\n            <div>{cells()}</div>\n        </div>\n    );\n};\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}