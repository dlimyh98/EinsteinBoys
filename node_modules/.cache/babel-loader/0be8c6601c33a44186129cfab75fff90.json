{"ast":null,"code":"import _slicedToArray from\"/Users/Damien/tasktracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// Each input will have it's own COMPONENT level state, not APP level state\nimport{useState}from'react';// AddText function catches onAdd Prop, that was passed in by App.js\n// AddText has it's own onSubmitFunction, that triggers when onSubmit EVENT triggers.\n// State Variables here MUST share the same name as State Variables in App.js\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AddText=function AddText(_ref){var onAdd=_ref.onAdd;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),text=_useState2[0],setText=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),day=_useState4[0],setDay=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),reminder=_useState6[0],setReminder=_useState6[1];// Logic when User clicks 'Submit'\nvar onSubmitFunction=function onSubmitFunction(e)// Input is the Event currently happening (which will be the event that triggers onSubmit)\n{e.preventDefault();// Prevents submission to a new webpage\n// Pop-up if User did not enter Text, and clicked submit\nif(!text){alert('Enter a Task!');}else// If everything ok, capture the data\n{// Call the onAdd function, passing in the appropriate inputs\n// Inputs would have already been captured in Stateful Value (as the User was typing it in), hence just capture that\nonAdd({text:text,day:day,reminder:reminder});// Clear the form from whatever the User typed in just now\n// Define (reuse) the State Hook functions, to modify the Stateful Value\nsetText('');setDay('');setReminder(false);}};return/*#__PURE__*/_jsxs(\"form\",{className:\"add-form\",onSubmit:onSubmitFunction,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-control\",children:[/*#__PURE__*/_jsx(\"label\",{children:\" Task \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Add Task\",value:text,onChange:function onChange(e){return setText(e.target.value);}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-control\",children:[/*#__PURE__*/_jsx(\"label\",{children:\" Date and Time \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter Date and Time\",value:day,onChange:function onChange(e){return setDay(e.target.value);}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-control form-control-check\",children:[\"  \",/*#__PURE__*/_jsx(\"label\",{children:\" Reminders \"}),/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",name:\"Reminders\",value:reminder,checked:reminder// Iff reminder is true, then box will be checked\n,onChange:function onChange(e){return setReminder(e.currentTarget.checked);}})]}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Save Task\",className:\"btn btn-block\"})]});};export default AddText;","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/components/AddTask.js"],"names":["useState","AddText","onAdd","text","setText","day","setDay","reminder","setReminder","onSubmitFunction","e","preventDefault","alert","target","value","currentTarget","checked"],"mappings":"gJAAA;AACA,OAAQA,QAAR,KAAuB,OAAvB,CAEA;AACA;AACA;wFACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAChB,IAD2BC,CAAAA,KAC3B,MAD2BA,KAC3B,CACI,cAAuBF,QAAQ,CAAC,EAAD,CAA/B,wCAAMG,IAAN,eAAYC,OAAZ,eACA,eAAqBJ,QAAQ,CAAC,EAAD,CAA7B,yCAAMK,GAAN,eAAWC,MAAX,eACA,eAA+BN,QAAQ,CAAC,KAAD,CAAvC,yCAAMO,QAAN,eAAgBC,WAAhB,eAGA;AACA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAASC,CAAT,CAAe;AACxC,CACIA,CAAC,CAACC,cAAF,GAAoB;AAEpB;AACA,GAAI,CAACR,IAAL,CACA,CACIS,KAAK,CAAC,eAAD,CAAL,CACH,CAHD,IAIO;AACP,CACI;AACA;AACAV,KAAK,CAAE,CAAEC,IAAI,CAAJA,IAAF,CAAOE,GAAG,CAAHA,GAAP,CAAWE,QAAQ,CAARA,QAAX,CAAF,CAAL,CAEA;AACA;AACAH,OAAO,CAAC,EAAD,CAAP,CACAE,MAAM,CAAC,EAAD,CAAN,CACAE,WAAW,CAAC,KAAD,CAAX,CACH,CACJ,CArBD,CAuBA,mBACI,cAAM,SAAS,CAAG,UAAlB,CAA6B,QAAQ,CAAIC,gBAAzC,wBAEI,aAAK,SAAS,CAAG,cAAjB,wBACI,iCADJ,cAEI,cAAO,IAAI,CAAG,MAAd,CACO,WAAW,CAAG,UADrB,CAEO,KAAK,CAAIN,IAFhB,CAGO,QAAQ,CAAK,kBAACO,CAAD,QAAON,CAAAA,OAAO,CAACM,CAAC,CAACG,MAAF,CAASC,KAAV,CAAd,EAHpB,EAFJ,GAFJ,cAWI,aAAK,SAAS,CAAG,cAAjB,wBACI,0CADJ,cAEI,cAAO,IAAI,CAAC,MAAZ,CACO,WAAW,CAAG,qBADrB,CAEO,KAAK,CAAIT,GAFhB,CAGO,QAAQ,CAAK,kBAACK,CAAD,QAAOJ,CAAAA,MAAM,CAACI,CAAC,CAACG,MAAF,CAASC,KAAV,CAAb,EAHpB,EAFJ,GAXJ,cAoBI,aAAK,SAAS,CAAG,iCAAjB,6BACI,sCADJ,cAEI,cAAO,IAAI,CAAC,UAAZ,CACO,IAAI,CAAC,WADZ,CAEO,KAAK,CAAIP,QAFhB,CAGO,OAAO,CAAIA,QAAU;AAH5B,CAIO,QAAQ,CAAK,kBAACG,CAAD,QAAOF,CAAAA,WAAW,CAACE,CAAC,CAACK,aAAF,CAAgBC,OAAjB,CAAlB,EAJpB,EAFJ,GApBJ,cA8BI,cAAO,IAAI,CAAG,QAAd,CAAuB,KAAK,CAAG,WAA/B,CAA2C,SAAS,CAAG,eAAvD,EA9BJ,GADJ,CAkCH,CAjED,CAmEA,cAAef,CAAAA,OAAf","sourcesContent":["// Each input will have it's own COMPONENT level state, not APP level state\nimport {useState} from 'react'\n\n// AddText function catches onAdd Prop, that was passed in by App.js\n// AddText has it's own onSubmitFunction, that triggers when onSubmit EVENT triggers.\n// State Variables here MUST share the same name as State Variables in App.js\nconst AddText = function( {onAdd} )\n{\n    const[text, setText] = useState('')\n    const[day, setDay] = useState('')\n    const[reminder, setReminder] = useState(false)\n\n\n    // Logic when User clicks 'Submit'\n    const onSubmitFunction = function(e)    // Input is the Event currently happening (which will be the event that triggers onSubmit)\n    {\n        e.preventDefault()  // Prevents submission to a new webpage\n\n        // Pop-up if User did not enter Text, and clicked submit\n        if (!text)\n        {\n            alert('Enter a Task!')\n        }\n        else   // If everything ok, capture the data\n        {\n            // Call the onAdd function, passing in the appropriate inputs\n            // Inputs would have already been captured in Stateful Value (as the User was typing it in), hence just capture that\n            onAdd( { text,day,reminder} )\n\n            // Clear the form from whatever the User typed in just now\n            // Define (reuse) the State Hook functions, to modify the Stateful Value\n            setText('')\n            setDay('')\n            setReminder(false)\n        }\n    }\n\n    return(\n        <form className = 'add-form' onSubmit = {onSubmitFunction}>\n\n            <div className = 'form-control'>\n                <label> Task </label>\n                <input type = 'text'\n                       placeholder = 'Add Task'\n                       value = {text}\n                       onChange = { (e) => setText(e.target.value) }\n                />\n            </div>\n\n            <div className = 'form-control'>\n                <label> Date and Time </label>\n                <input type='text'\n                       placeholder = 'Enter Date and Time'\n                       value = {day}\n                       onChange = { (e) => setDay(e.target.value) }\n                />\n            </div>\n\n            <div className = 'form-control form-control-check'>  {/* Input multiple classes by using Quotations, can use String Template also */}\n                <label> Reminders </label>\n                <input type='checkbox'\n                       name='Reminders'\n                       value = {reminder}\n                       checked = {reminder} // Iff reminder is true, then box will be checked\n                       onChange = { (e) => setReminder(e.currentTarget.checked) }\n                />\n            </div>\n\n            <input type = 'submit' value = 'Save Task' className = 'btn btn-block' />\n        </form>\n    )\n}\n\nexport default AddText"]},"metadata":{},"sourceType":"module"}