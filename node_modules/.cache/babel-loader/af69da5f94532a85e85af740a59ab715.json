{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/components/Task.js\";\nimport { FaTimes } from 'react-icons/fa'; // Importing Icons from installed React Icons Library. Restart npm server after installing!\n// Destructuring task, that was passed in as Prop from Tasks.js\n// Destructuring onDelete, that was passed in as Prop from Tasks.js\n\n/* Events are stored in App.js, so how to modify the component when we click on it?\n- We could access the State within our components, if we were using Redux/Context\n- Alternatively, we could use Props. Send down a function as a Prop, then fire that function off here in Task.js\n  State gets passed down, Actions get passed up\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction priorityColor(parameter) {\n  switch (parameter) {\n    case \"1\":\n      return \"SpringGreen\";\n\n    case \"2\":\n      return \"Khaki\";\n\n    case \"3\":\n      return \"IndianRed\";\n\n    default:\n      return \"GainsBoro\";\n  }\n} // wrt INDIVIVUAL Task (we have mapped in Tasks.js)\n\n\nconst Task = function ({\n  task,\n  onDelete\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: priorityColor(task.priority)\n    }\n    /* first className is task */\n\n    /* second classname is using template literals (backticks) */\n    ,\n    className: `task ${task.reminder ? 'reminder' : ' '}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [task.text, /*#__PURE__*/_jsxDEV(FaTimes, {\n        style: {\n          color: 'Black',\n          cursor: 'pointer'\n        }\n        /* Use double braces for Style */\n        ,\n        onClick: () => onDelete(task)\n        /* Pass in the task.text as well! */\n\n        /* onClick will cause onDelete to work it's way up to App.js, where it will call deleteTask */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", task.day, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/components/Task.js"],"names":["FaTimes","priorityColor","parameter","Task","task","onDelete","backgroundColor","priority","reminder","text","color","cursor","day"],"mappings":";AAAA,SAAQA,OAAR,QAAsB,gBAAtB,C,CAAwC;AAExC;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,aAAT,CAAwBC,SAAxB,EAAmC;AAC/B,UAAOA,SAAP;AACI,SAAK,GAAL;AAAW,aAAO,aAAP;;AACX,SAAK,GAAL;AAAW,aAAO,OAAP;;AACX,SAAK,GAAL;AAAW,aAAO,WAAP;;AACX;AAAU,aAAO,WAAP;AAJd;AAMH,C,CAED;;;AACA,MAAMC,IAAI,GAAG,UAAS;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAT,EACb;AACI,sBACI;AAAK,IAAA,KAAK,EAAK;AAACC,MAAAA,eAAe,EAAGL,aAAa,CAACG,IAAI,CAACG,QAAN;AAAhC;AACX;;AACA;AAFJ;AAGI,IAAA,SAAS,EAAM,QAAQH,IAAI,CAACI,QAAL,GAAgB,UAAhB,GAA6B,GAAI,EAH5D;AAAA,4BAKI;AAAA,iBACKJ,IAAI,CAACK,IADV,eAEI,QAAC,OAAD;AACI,QAAA,KAAK,EAAI;AAAEC,UAAAA,KAAK,EAAG,OAAV;AAAmBC,UAAAA,MAAM,EAAG;AAA5B;AAA0C;AADvD;AAEI,QAAA,OAAO,EAAK,MAAMN,QAAQ,CAAED,IAAF;AAAuB;;AACjD;;AAHJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAaI;AAAA,sBAAKA,IAAI,CAACQ,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAnBD;;KAAMT,I;AAqBN,eAAeA,IAAf","sourcesContent":["import {FaTimes} from 'react-icons/fa'  // Importing Icons from installed React Icons Library. Restart npm server after installing!\n\n// Destructuring task, that was passed in as Prop from Tasks.js\n// Destructuring onDelete, that was passed in as Prop from Tasks.js\n\n/* Events are stored in App.js, so how to modify the component when we click on it?\n- We could access the State within our components, if we were using Redux/Context\n- Alternatively, we could use Props. Send down a function as a Prop, then fire that function off here in Task.js\n  State gets passed down, Actions get passed up\n */\n\nfunction priorityColor (parameter) {\n    switch(parameter) {\n        case \"1\" : return \"SpringGreen\"\n        case \"2\" : return \"Khaki\"\n        case \"3\" : return \"IndianRed\"\n        default : return \"GainsBoro\"\n    }\n}\n\n// wrt INDIVIVUAL Task (we have mapped in Tasks.js)\nconst Task = function({task, onDelete})\n{\n    return(\n        <div style = { {backgroundColor : priorityColor(task.priority) } }\n            /* first className is task */\n            /* second classname is using template literals (backticks) */\n            className = { `task ${ task.reminder ? 'reminder' : ' '}`}\n        >\n            <h3>\n                {task.text}\n                <FaTimes\n                    style = {{ color : 'Black', cursor : 'pointer'}}   /* Use double braces for Style */\n                    onClick = { () => onDelete( task ) }             /* Pass in the task.text as well! */\n                    /* onClick will cause onDelete to work it's way up to App.js, where it will call deleteTask */\n                />\n            </h3>\n            <p> {task.day} </p>\n        </div>\n    )\n}\n\nexport default Task"]},"metadata":{},"sourceType":"module"}