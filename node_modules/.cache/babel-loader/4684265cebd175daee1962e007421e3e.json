{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react'; // Custom Hook to alert React that token retrieval was successful, by triggering a re-render when data changes\n\nexport default function useToken() {\n  _s();\n\n  // Retrieve token to render correct page\n  const getToken = () => {\n    const tokenString = sessionStorage.getItem('token'); // Retrieve token using Key\n\n    const userToken = JSON.parse(tokenString); // Convert to JSON\n\n    return userToken === null || userToken === void 0 ? void 0 : userToken.userTokenStored; // Chaining operator, since userTokenStoredKey is invalid for first session\n  }; // State initialised with retrieveToken\n\n\n  const [userTokenStored, setToken] = useState(retrieveToken()); // useState here triggers re-render\n  // Session Storage (for Authentication) + updating State\n  // storedToken is placeholder for function below it\n\n  const saveToken = userTokenRetrieved => {\n    sessionStorage.setItem('userTokenStored', JSON.stringify(userTokenRetrieved)); // Saving to Session Storage\n\n    setToken(userTokenRetrieved.userTokenStored); // Updating Stateful Value\n  }; // Return an Object\n\n\n  return {\n    returnToken: userTokenStored,\n    saveToken\n  };\n}\n\n_s(useToken, \"eC0aZZw7JBTsMOrSxOIWcsOkZAc=\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/components/AuthPage/useToken.js"],"names":["useState","useToken","getToken","tokenString","sessionStorage","getItem","userToken","JSON","parse","userTokenStored","setToken","retrieveToken","saveToken","userTokenRetrieved","setItem","stringify","returnToken"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB,C,CAEA;;AACA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAE/B;AACA,QAAMC,QAAQ,GAAG,MAAM;AACnB,UAAMC,WAAW,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAApB,CADmB,CACqC;;AACxD,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWL,WAAX,CAAlB,CAFmB,CAE8C;;AACjE,WAAOG,SAAP,aAAOA,SAAP,uBAAOA,SAAS,CAAEG,eAAlB,CAHmB,CAGiB;AACvC,GAJD,CAH+B,CAS/B;;;AACA,QAAK,CAACA,eAAD,EAAkBC,QAAlB,IAA8BV,QAAQ,CAACW,aAAa,EAAd,CAA3C,CAV+B,CAUiC;AAEhE;AACA;;AACA,QAAMC,SAAS,GAAIC,kBAAD,IAAwB;AACtCT,IAAAA,cAAc,CAACU,OAAf,CAAuB,iBAAvB,EAA0CP,IAAI,CAACQ,SAAL,CAAeF,kBAAf,CAA1C,EADsC,CAC0C;;AAChFH,IAAAA,QAAQ,CAACG,kBAAkB,CAACJ,eAApB,CAAR,CAFsC,CAEmE;AAC5G,GAHD,CAd+B,CAmB/B;;;AACA,SAAO;AACHO,IAAAA,WAAW,EAAGP,eADX;AAC4BG,IAAAA;AAD5B,GAAP;AAKH;;GAzBuBX,Q","sourcesContent":["import {useState} from 'react'\n\n// Custom Hook to alert React that token retrieval was successful, by triggering a re-render when data changes\nexport default function useToken() {\n\n    // Retrieve token to render correct page\n    const getToken = () => {\n        const tokenString = sessionStorage.getItem('token')     // Retrieve token using Key\n        const userToken = JSON.parse(tokenString)                        // Convert to JSON\n        return userToken?.userTokenStored   // Chaining operator, since userTokenStoredKey is invalid for first session\n    };\n\n    // State initialised with retrieveToken\n    const[userTokenStored, setToken] = useState(retrieveToken())    // useState here triggers re-render\n\n    // Session Storage (for Authentication) + updating State\n    // storedToken is placeholder for function below it\n    const saveToken = (userTokenRetrieved) => {\n        sessionStorage.setItem('userTokenStored', JSON.stringify(userTokenRetrieved));  // Saving to Session Storage\n        setToken(userTokenRetrieved.userTokenStored)                                                             // Updating Stateful Value\n    }\n\n    // Return an Object\n    return {\n        returnToken : userTokenStored, saveToken\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}