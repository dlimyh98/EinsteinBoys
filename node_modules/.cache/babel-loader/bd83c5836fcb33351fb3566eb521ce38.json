{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { useEffect, useState } from 'react'; // Deals with side-effects, Component needs to do something AFTER rendering\n\nimport Authentication from './components/Authentication';\nimport Axios from \"axios\"; // App (Global) State.\n// Not best practice, will use Redux to keep track of JS States in future\n// Components can be Functions (with hooks) or Classes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // tasks is RETURNED stateful value, default will be initialState (when event not triggered yet)\n  // setTasks is function to change State. Reusable in different contexts\n  // initialize useState to default value as seen below\n  const fetchTasks = async () => {\n    Axios({\n      method: \"GET\",\n      withCredentials: true,\n      url: \"http://localhost:4000/tasks\"\n    }).then(res => {\n      return res.data;\n    });\n  };\n\n  const [tasks, setTasks] = useState([]);\n  const [showAddButton, setshowAddButton] = useState(false);\n  useEffect(() => {\n    const fetchedTasks = fetchTasks;\n    setTasks(fetchedTasks);\n  }, [tasks]);\n\n  const onAdd = TaskAdded => {\n    Axios({\n      method: \"POST\",\n      data: TaskAdded,\n      withCredentials: true,\n      url: \"http://localhost:4000/tasks\"\n    }).then(res => {\n      setTasks([...tasks, TaskAdded]);\n    });\n  };\n\n  const deleteTask = async TaskDelete => {\n    Axios({\n      method: \"DELETE\",\n      data: TaskDelete,\n      withCredentials: true,\n      url: \"http://localhost:4000/tasks\"\n    }).then(res => {// Update UI\n    });\n  };\n\n  const [isAuth, setisAuth] = useState(false); // Return is JSX, not HTML\n  // Can only return one single Parent Element\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isAuth && /*#__PURE__*/_jsxDEV(Authentication, {\n      setisAuth: setisAuth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 23\n    }, this), isAuth && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        buttonColorDecider: showAddButton,\n        toggleAdd: () => setshowAddButton(!showAddButton)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }, this), \" \", showAddButton ? /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: onAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 36\n      }, this) : '', \" \", tasks.length !== 0 ?\n      /*#__PURE__*/\n\n      /* Pass in deleteTask function as Prop, to Tasks.js\n         - Tasks.js contains Task.js\n         - Task.js contains the button itself, that is the trigger point for deletion\n         Pass in addTask function as Prop, to AddTask.js\n       */\n      _jsxDEV(Tasks, {\n        tasks: tasks\n        /* Passing in tasks as Prop */\n        ,\n        onDelete: deleteTask\n        /* Passing in deleteTask (FUNCTION) as Prop, into variable onDelete */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 31\n      }, this) : 'No Tasks Today!']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"fWU9oSie7raVnjdbIhOrXMzi9OI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/App.js"],"names":["Header","Tasks","AddTask","useEffect","useState","Authentication","Axios","App","fetchTasks","method","withCredentials","url","then","res","data","tasks","setTasks","showAddButton","setshowAddButton","fetchedTasks","onAdd","TaskAdded","deleteTask","TaskDelete","isAuth","setisAuth","length"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC,C,CAA0C;;AAC1C,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACX;AACA;AACA;AACA,QAAMC,UAAU,GAAG,YAAY;AAC3BF,IAAAA,KAAK,CAAC;AACFG,MAAAA,MAAM,EAAG,KADP;AAEFC,MAAAA,eAAe,EAAG,IAFhB;AAGFC,MAAAA,GAAG,EAAG;AAHJ,KAAD,CAAL,CAIGC,IAJH,CAISC,GAAD,IAAS;AACb,aAAQA,GAAG,CAACC,IAAZ;AACH,KAND;AAOH,GARD;;AAUA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,KAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAE,MAAM;AACb,UAAMgB,YAAY,GAAGX,UAArB;AACAQ,IAAAA,QAAQ,CAACG,YAAD,CAAR;AACH,GAHQ,EAGN,CAACJ,KAAD,CAHM,CAAT;;AAKA,QAAMK,KAAK,GAAIC,SAAD,IAAe;AACzBf,IAAAA,KAAK,CAAC;AACFG,MAAAA,MAAM,EAAG,MADP;AAEFK,MAAAA,IAAI,EAAGO,SAFL;AAGFX,MAAAA,eAAe,EAAG,IAHhB;AAIFC,MAAAA,GAAG,EAAE;AAJH,KAAD,CAAL,CAKGC,IALH,CAKSC,GAAD,IAAS;AACbG,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWM,SAAX,CAAD,CAAR;AACH,KAPD;AAQH,GATD;;AAWA,QAAMC,UAAU,GAAG,MAAMC,UAAN,IAAqB;AACpCjB,IAAAA,KAAK,CAAC;AACFG,MAAAA,MAAM,EAAG,QADP;AAEFK,MAAAA,IAAI,EAAGS,UAFL;AAGFb,MAAAA,eAAe,EAAG,IAHhB;AAIFC,MAAAA,GAAG,EAAG;AAJJ,KAAD,CAAL,CAKGC,IALH,CAKSC,GAAD,IAAS,CACb;AACH,KAPD;AAQH,GATD;;AAWA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAC,KAAD,CAApC,CA5CW,CA6Cb;AACA;;AACA,sBACI;AAAA,eACK,CAACoB,MAAD,iBAAW,QAAC,cAAD;AAAgB,MAAA,SAAS,EAAIC;AAA7B;AAAA;AAAA;AAAA;AAAA,YADhB,EAGKD,MAAM,iBACH;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI,QAAC,MAAD;AACI,QAAA,kBAAkB,EAAEP,aADxB;AAEI,QAAA,SAAS,EAAE,MAAMC,gBAAgB,CAAC,CAACD,aAAF;AAFrC;AAAA;AAAA;AAAA;AAAA,cADJ,OAMKA,aAAa,gBAAG,QAAC,OAAD;AACb,QAAA,KAAK,EAAEG;AADM;AAAA;AAAA;AAAA;AAAA,cAAH,GACQ,EAP1B,OASQL,KAAK,CAACW,MAAN,KAAiB,CAAjB;AAAA;;AAEQ;AAC9B;AACA;AACA;AACA;AAC8B,cAAC,KAAD;AACI,QAAA,KAAK,EAAEX;AAAe;AAD1B;AAEI,QAAA,QAAQ,EAAEO;AAAY;;AAF1B;AAAA;AAAA;AAAA;AAAA,cAPR,GAaI,iBAtBZ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJR;AAAA,kBADJ;AAkCD;;GAjFQf,G;;KAAAA,G;AAmFT,eAAeA,GAAf","sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport {useEffect, useState} from 'react' // Deals with side-effects, Component needs to do something AFTER rendering\nimport Authentication from './components/Authentication'\nimport Axios from \"axios\"\n\n// App (Global) State.\n// Not best practice, will use Redux to keep track of JS States in future\n// Components can be Functions (with hooks) or Classes\nfunction App() {\n    // tasks is RETURNED stateful value, default will be initialState (when event not triggered yet)\n    // setTasks is function to change State. Reusable in different contexts\n    // initialize useState to default value as seen below\n    const fetchTasks = async () => {\n        Axios({\n            method : \"GET\",\n            withCredentials : true,\n            url : \"http://localhost:4000/tasks\"\n        }).then((res) => {\n            return (res.data)\n        })\n    }\n\n    const [tasks, setTasks] = useState([])\n    const [showAddButton, setshowAddButton] = useState(false)\n\n    useEffect( () => {\n        const fetchedTasks = fetchTasks\n        setTasks(fetchedTasks)\n    }, [tasks])\n\n    const onAdd = (TaskAdded) => {\n        Axios({\n            method : \"POST\",\n            data : TaskAdded,\n            withCredentials : true,\n            url: \"http://localhost:4000/tasks\",\n        }).then((res) => {\n            setTasks([...tasks, TaskAdded])\n        })\n    }\n\n    const deleteTask = async(TaskDelete) => {\n        Axios({\n            method : \"DELETE\",\n            data : TaskDelete,\n            withCredentials : true,\n            url : \"http://localhost:4000/tasks\",\n        }).then((res) => {\n            // Update UI\n        })\n    }\n\n    const [isAuth, setisAuth] = useState(false)\n  // Return is JSX, not HTML\n  // Can only return one single Parent Element\n  return (\n      <>\n          {!isAuth && <Authentication setisAuth = {setisAuth} />}\n\n          {isAuth &&\n              <div className='container'>\n                  <Header\n                      buttonColorDecider={showAddButton}\n                      toggleAdd={() => setshowAddButton(!showAddButton)}\n                  /> {/* Button is in <Header>, so we must pass down the State Hook function as a Prop. We also define the State Hook function here */}\n\n                  {showAddButton ? <AddTask\n                      onAdd={onAdd}/> : ''} {/* Event Handlers must be function or function reference, for setshowAddButton*/}\n                  {\n                      tasks.length !== 0 ?\n                          (\n                              /* Pass in deleteTask function as Prop, to Tasks.js\n                                 - Tasks.js contains Task.js\n                                 - Task.js contains the button itself, that is the trigger point for deletion\n                                 Pass in addTask function as Prop, to AddTask.js\n                               */\n                              <Tasks\n                                  tasks={tasks}         /* Passing in tasks as Prop */\n                                  onDelete={deleteTask} /* Passing in deleteTask (FUNCTION) as Prop, into variable onDelete */\n                              />\n                          )\n                          :\n                          'No Tasks Today!'\n                  }\n\n              </div>\n          }\n          </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}