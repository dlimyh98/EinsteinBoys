{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { useEffect, useState } from 'react'; // Deals with side-effects, Component needs to do something AFTER rendering\n\nimport Authentication from './components/Authentication';\nimport Axios from \"axios\"; // App (Global) State.\n// Not best practice, will use Redux to keep track of JS States in future\n// Components can be Functions (with hooks) or Classes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const fetchTasks = () => {\n    //console.log(\"Fetching\")\n    Axios({\n      method: \"GET\",\n      withCredentials: true,\n      url: 'http://localhost:4000/tasks'\n    }).then(res => {\n      //console.log(\"Setting\")\n      console.log(res.data.task);\n      setTasks(res.data.task);\n    });\n  };\n\n  const [tasks, setTasks] = useState(() => () => fetchTasks()); // useState function, unlike useState value\n\n  const [showAddButton, setshowAddButton] = useState(false);\n  const [isAuth, setisAuth] = useState(false);\n  const [isPriority, setisPriority] = useState(false);\n  useEffect(() => {\n    console.log(\"useEffect triggered\");\n    console.log(\"Auth is \", isAuth);\n    fetchTasks();\n  }, [isAuth]);\n\n  const onAdd = TaskAdded => {\n    Axios({\n      method: \"POST\",\n      data: TaskAdded,\n      withCredentials: true,\n      url: \"http://localhost:4000/tasks\"\n    }).then(res => {\n      fetchTasks();\n    });\n  };\n\n  const deleteTask = async TaskDelete => {\n    Axios({\n      method: \"DELETE\",\n      data: TaskDelete,\n      withCredentials: true,\n      url: \"http://localhost:4000/tasks\"\n    }).then(res => {\n      //console.log(res.data.task)\n      fetchTasks();\n    });\n  }; // Return is JSX, not HTML\n  // Can only return one single Parent Element\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isAuth && /*#__PURE__*/_jsxDEV(Authentication, {\n      setisAuth: setisAuth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 23\n    }, this), isAuth && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        buttonColorDecider: showAddButton,\n        toggleAdd: () => setshowAddButton(!showAddButton)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 19\n      }, this), \" \", showAddButton ? /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: onAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 36\n      }, this) : '', \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" togglePriority \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        name: \"togglePriority\",\n        value: isPriority,\n        checked: isPriority,\n        onChange: e => setisPriority(e.currentTarget.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 19\n      }, this), tasks.length !== 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: tasks // Passing in tasks Array as Prop\n        ,\n        onDelete: deleteTask // Passing in deleteTask (FUNCTION) as Prop\n        ,\n        togglePriority: isPriority // Toggle whether order by Priority or not\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 31\n      }, this) : 'No Tasks Today!']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"nppsDdcnZtRSq2xfd9OXCobGkVA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/App.js"],"names":["Header","Tasks","AddTask","useEffect","useState","Authentication","Axios","App","fetchTasks","method","withCredentials","url","then","res","console","log","data","task","setTasks","tasks","showAddButton","setshowAddButton","isAuth","setisAuth","isPriority","setisPriority","onAdd","TaskAdded","deleteTask","TaskDelete","e","currentTarget","checked","length"],"mappings":"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","sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport {useEffect, useState} from 'react' // Deals with side-effects, Component needs to do something AFTER rendering\nimport Authentication from './components/Authentication'\nimport Axios from \"axios\"\n\n// App (Global) State.\n// Not best practice, will use Redux to keep track of JS States in future\n// Components can be Functions (with hooks) or Classes\nfunction App() {\n\n    const fetchTasks = () => {\n        //console.log(\"Fetching\")\n        Axios({\n            method : \"GET\",\n            withCredentials : true,\n            url : 'http://localhost:4000/tasks'\n        }).then( (res) => {\n            //console.log(\"Setting\")\n            console.log(res.data.task)\n            setTasks(res.data.task)\n        })\n    }\n\n    const [tasks, setTasks] = useState( () => () => fetchTasks())    // useState function, unlike useState value\n    const [showAddButton, setshowAddButton] = useState(false)\n    const [isAuth, setisAuth] = useState(false)\n    const [isPriority, setisPriority] = useState(false)\n\n    useEffect(() => {\n        console.log(\"useEffect triggered\")\n        console.log(\"Auth is \" , isAuth)\n            fetchTasks()\n        }, [isAuth]\n    )\n\n    const onAdd = (TaskAdded) => {\n        Axios({\n            method : \"POST\",\n            data : TaskAdded,\n            withCredentials : true,\n            url: \"http://localhost:4000/tasks\",\n        }).then((res) => {\n            fetchTasks()\n        })\n    }\n\n    const deleteTask = async(TaskDelete) => {\n        Axios({\n            method : \"DELETE\",\n            data : TaskDelete,\n            withCredentials : true,\n            url : \"http://localhost:4000/tasks\",\n        }).then((res) => {\n            //console.log(res.data.task)\n            fetchTasks()\n        })\n    }\n\n  // Return is JSX, not HTML\n  // Can only return one single Parent Element\n  return (\n      <>\n          {!isAuth && <Authentication setisAuth = {setisAuth} />}\n\n          {isAuth &&\n              <div className='container'>\n\n                  <Header\n                      buttonColorDecider={showAddButton}\n                      toggleAdd={() => setshowAddButton(!showAddButton)}\n                  /> {/* Button is in <Header>, so we must pass down the State Hook function as a Prop. We also define the State Hook function here */}\n\n                  {showAddButton ? <AddTask\n                      onAdd={onAdd}/> : ''} {/* Event Handlers must be function or function reference, for setshowAddButton*/}\n\n                  <label> togglePriority </label>\n                  <input type = \"checkbox\"\n                         name = \"togglePriority\"\n                         value = {isPriority}\n                         checked = {isPriority}\n                         onChange = { (e) => setisPriority(e.currentTarget.checked) }\n                      />\n\n                  {\n                      tasks.length !== 0 ?\n                          (\n                              <Tasks\n                                  tasks={tasks}                  // Passing in tasks Array as Prop\n                                  onDelete={deleteTask}          // Passing in deleteTask (FUNCTION) as Prop\n                                  togglePriority = {isPriority}  // Toggle whether order by Priority or not\n                              />\n                          )\n                          :\n                          'No Tasks Today!'\n                  }\n\n              </div>\n          }\n          </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}