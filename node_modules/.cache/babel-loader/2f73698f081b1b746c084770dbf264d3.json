{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/components/AddTask.js\",\n    _s = $RefreshSig$();\n\n// Each input will have it's own COMPONENT level state, not APP level state\nimport { useState } from 'react'; // AddTask function catches onAdd Prop, that was passed in by App.js\n// AddTask has it's own onSubmitFunction, that triggers when onSubmit EVENT triggers.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddTask = ({\n  onAdd\n}) => {\n  _s();\n\n  const [task, setTask] = useState('');\n  const [date, setDate] = useState('');\n  const [reminder, setReminder] = useState(false); // Logic when User clicks 'Submit'\n\n  const onSubmit = function (e) // Input is the Event currently happening (which will be the event that triggers onSubmit)\n  {\n    e.preventDefault(); // Prevents submission to a new webpage\n    // Pop-up if User did not enter Task, and clicked submit\n\n    if (!task) {\n      alert('Enter a task!');\n      return;\n    } // Call the onAdd function, passing in the appropriate inputs\n    // Inputs would have already been captured in Stateful Value (as the User was typing it in), hence just capture that\n\n\n    onAdd({\n      task,\n      date,\n      reminder\n    }); // Clear the form from whatever the User typed in just now\n    // Define (reuse) the State Hook functions, to modify the Stateful Value\n\n    setTask('');\n    setDate('');\n    setReminder(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"add-form\",\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Task \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Add Tasks\",\n        value: task,\n        onChange: e => setTask(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Date \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Date\",\n        value: date,\n        onChange: e => setDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control form-control-check\",\n      children: [\"  \", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Reminders \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: reminder // Iff reminder is true, then box will be checked\n        ,\n        value: reminder,\n        onChange: e => setReminder(e.currentTarget.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Save Task\",\n      className: \"btn btn-block\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddTask, \"XmlPR8AseRdExUkiSUCw4gjKybM=\");\n\n_c = AddTask;\nexport default AddTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/components/AddTask.js"],"names":["useState","AddTask","onAdd","task","setTask","date","setDate","reminder","setReminder","onSubmit","e","preventDefault","alert","target","value","currentTarget","checked"],"mappings":";;;AAAA;AACA,SAAQA,QAAR,QAAuB,OAAvB,C,CAGA;AACA;;;;AACA,MAAMC,OAAO,GAAG,CAAE;AAACC,EAAAA;AAAD,CAAF,KAChB;AAAA;;AACI,QAAK,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAK,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAK,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAvC,CAHJ,CAKI;;AACA,QAAMS,QAAQ,GAAG,UAASC,CAAT,EAAe;AAChC;AACIA,IAAAA,CAAC,CAACC,cAAF,GADJ,CACwB;AAEpB;;AACA,QAAI,CAACR,IAAL,EACA;AACIS,MAAAA,KAAK,CAAC,eAAD,CAAL;AACA;AACH,KARL,CASQ;AACA;;;AACAV,IAAAA,KAAK,CAAE;AAAEC,MAAAA,IAAF;AAAOE,MAAAA,IAAP;AAAYE,MAAAA;AAAZ,KAAF,CAAL,CAXR,CAaQ;AACA;;AACAH,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACP,GAnBD;;AAqBA,sBACI;AAAM,IAAA,SAAS,EAAG,UAAlB;AAA6B,IAAA,QAAQ,EAAIC,QAAzC;AAAA,4BAEI;AAAK,MAAA,SAAS,EAAG,cAAjB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAG,MAAd;AACO,QAAA,WAAW,EAAG,WADrB;AAEO,QAAA,KAAK,EAAIN,IAFhB;AAGO,QAAA,QAAQ,EAAMO,CAAD,IAAON,OAAO,CAACM,CAAC,CAACG,MAAF,CAASC,KAAV;AAHlC;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAWI;AAAK,MAAA,SAAS,EAAG,cAAjB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACO,QAAA,WAAW,EAAG,YADrB;AAEO,QAAA,KAAK,EAAIT,IAFhB;AAGO,QAAA,QAAQ,EAAMK,CAAD,IAAOJ,OAAO,CAACI,CAAC,CAACG,MAAF,CAASC,KAAV;AAHlC;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ,eAoBI;AAAK,MAAA,SAAS,EAAG,iCAAjB;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,UAAZ;AACO,QAAA,OAAO,EAAIP,QADlB,CAC4B;AAD5B;AAEO,QAAA,KAAK,EAAIA,QAFhB;AAGO,QAAA,QAAQ,EAAMG,CAAD,IAAOF,WAAW,CAACE,CAAC,CAACK,aAAF,CAAgBC,OAAjB;AAHtC;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YApBJ,eA6BI;AAAO,MAAA,IAAI,EAAG,QAAd;AAAuB,MAAA,KAAK,EAAG,WAA/B;AAA2C,MAAA,SAAS,EAAG;AAAvD;AAAA;AAAA;AAAA;AAAA,YA7BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH,CA7DD;;GAAMf,O;;KAAAA,O;AA+DN,eAAeA,OAAf","sourcesContent":["// Each input will have it's own COMPONENT level state, not APP level state\nimport {useState} from 'react'\n\n\n// AddTask function catches onAdd Prop, that was passed in by App.js\n// AddTask has it's own onSubmitFunction, that triggers when onSubmit EVENT triggers.\nconst AddTask = ( {onAdd}) =>\n{\n    const[task, setTask] = useState('')\n    const[date, setDate] = useState('')\n    const[reminder, setReminder] = useState(false)\n\n    // Logic when User clicks 'Submit'\n    const onSubmit = function(e)    // Input is the Event currently happening (which will be the event that triggers onSubmit)\n    {\n        e.preventDefault()  // Prevents submission to a new webpage\n\n        // Pop-up if User did not enter Task, and clicked submit\n        if (!task)\n        {\n            alert('Enter a task!')\n            return\n        }\n            // Call the onAdd function, passing in the appropriate inputs\n            // Inputs would have already been captured in Stateful Value (as the User was typing it in), hence just capture that\n            onAdd( { task,date,reminder} )\n\n            // Clear the form from whatever the User typed in just now\n            // Define (reuse) the State Hook functions, to modify the Stateful Value\n            setTask('')\n            setDate('')\n            setReminder(false)\n    }\n\n    return(\n        <form className = 'add-form' onSubmit = {onSubmit}>\n\n            <div className = 'form-control'>\n                <label> Task </label>\n                <input type = 'text'\n                       placeholder = 'Add Tasks'\n                       value = {task}\n                       onChange = { (e) => setTask(e.target.value) }\n                />\n            </div>\n\n            <div className = 'form-control'>\n                <label> Date </label>\n                <input type='text'\n                       placeholder = 'Enter Date'\n                       value = {date}\n                       onChange = { (e) => setDate(e.target.value) }\n                />\n            </div>\n\n            <div className = 'form-control form-control-check'>  {/* Input multiple classes by using Quotations, can use String Template also */}\n                <label> Reminders </label>\n                <input type='checkbox'\n                       checked = {reminder} // Iff reminder is true, then box will be checked\n                       value = {reminder}\n                       onChange = { (e) => setReminder(e.currentTarget.checked) }\n                />\n            </div>\n\n            <input type = 'submit' value = 'Save Task' className = 'btn btn-block' />\n        </form>\n    )\n}\n\nexport default AddTask"]},"metadata":{},"sourceType":"module"}