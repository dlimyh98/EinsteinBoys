{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react'; // Custom Hook to alert React that token retrieval was successful, by triggering a re-render when data changes\n\nexport default function useToken() {\n  _s();\n\n  const getToken = () => {\n    const tokenString = sessionStorage.getItem('token');\n    const userToken = JSON.parse(tokenString);\n    return userToken === null || userToken === void 0 ? void 0 : userToken.token;\n  }; // State initialised with retrieveToken\n\n\n  const [userTokenStored, setToken] = useState(getToken()); // useState here triggers re-render\n  // Session Storage (for Authentication) + updating State\n  // storedToken is placeholder for function below it\n\n  const storedToken = userToken => {\n    sessionStorage.setItem('userTokenStored', JSON.stringify(userToken)); // Saving to Session Storage\n\n    setToken(userToken); // Updating Stateful Value\n  }; // Return an Object\n\n\n  return {\n    returnToken: userTokenStored,\n    storedToken\n  };\n}\n\n_s(useToken, \"mvvyTWZg0qEO0ClFpG/VMIiBt90=\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/components/AuthPage/useToken.js"],"names":["useState","useToken","getToken","tokenString","sessionStorage","getItem","userToken","JSON","parse","token","userTokenStored","setToken","storedToken","setItem","stringify","returnToken"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB,C,CAEA;;AACA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAE/B,QAAMC,QAAQ,GAAG,MAAM;AACnB,UAAMC,WAAW,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAApB;AACA,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWL,WAAX,CAAlB;AACA,WAAOG,SAAP,aAAOA,SAAP,uBAAOA,SAAS,CAAEG,KAAlB;AACH,GAJD,CAF+B,CAQ/B;;;AACA,QAAK,CAACC,eAAD,EAAkBC,QAAlB,IAA8BX,QAAQ,CAACE,QAAQ,EAAT,CAA3C,CAT+B,CAS4B;AAE3D;AACA;;AACA,QAAMU,WAAW,GAAIN,SAAD,IAAe;AAC/BF,IAAAA,cAAc,CAACS,OAAf,CAAuB,iBAAvB,EAA0CN,IAAI,CAACO,SAAL,CAAeR,SAAf,CAA1C,EAD+B,CACwC;;AACvEK,IAAAA,QAAQ,CAACL,SAAD,CAAR,CAF+B,CAEwC;AAC1E,GAHD,CAb+B,CAkB/B;;;AACA,SAAO;AACHS,IAAAA,WAAW,EAAGL,eADX;AAC4BE,IAAAA;AAD5B,GAAP;AAKH;;GAxBuBX,Q","sourcesContent":["import {useState} from 'react'\n\n// Custom Hook to alert React that token retrieval was successful, by triggering a re-render when data changes\nexport default function useToken() {\n\n    const getToken = () => {\n        const tokenString = sessionStorage.getItem('token');\n        const userToken = JSON.parse(tokenString);\n        return userToken?.token\n    };\n\n    // State initialised with retrieveToken\n    const[userTokenStored, setToken] = useState(getToken())    // useState here triggers re-render\n\n    // Session Storage (for Authentication) + updating State\n    // storedToken is placeholder for function below it\n    const storedToken = (userToken) => {\n        sessionStorage.setItem('userTokenStored', JSON.stringify(userToken))   // Saving to Session Storage\n        setToken(userToken)                                                    // Updating Stateful Value\n    }\n\n    // Return an Object\n    return {\n        returnToken : userTokenStored, storedToken\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}