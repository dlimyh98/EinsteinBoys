{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/components/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./Calendar.css\";\nimport format from \"date-fns/format\";\nimport startOfWeek from 'date-fns/startOfWeek';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport isSameDay from 'date-fns/isSameDay';\nimport addDays from 'date-fns/addDays';\nimport addMonths from 'date-fns/addMonths';\nimport subMonths from \"date-fns/subMonths\";\nimport toDate from 'date-fns/toDate';\nimport parseISO from 'date-fns/parseISO'; // parse ISO to Date\n\nimport formatISO9075 from 'date-fns/formatISO9075';\nimport moment from \"moment\"; // Date to ISO 9075 format (with options)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calendar = ({\n  tasks,\n  isPriority\n}) => {\n  _s();\n\n  // Default State is current Day\n  const [currentDate, setCurrentDate] = useState(new Date()); // for Calendar to render proper month\n\n  const [selectedDate, setSelectedDate] = useState(new Date()); // styling for selected Date\n\n  const [isActive, setActive] = useState(false);\n\n  const toggleClass = () => {\n    setActive(!isActive);\n  }; // Add 1 to current Month\n\n\n  const nextMonth = () => {\n    setCurrentDate(addMonths(currentDate, 1));\n  }; // Deduct 1 from current Month\n\n\n  const prevMonth = () => {\n    setCurrentDate(subMonths(currentDate, 1));\n  }; // sets how Header (Month/Year) is displayed\n\n\n  const header = () => {\n    const dateFormat = \"MMMM yyyy\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header row flex-middle\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column col-start\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          onClick: prevMonth,\n          children: \"chevron_left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column col-center\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: format(currentDate, dateFormat)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column col-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          onClick: nextMonth,\n          children: \"chevron_right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }; // sets how (Monday-Sunday) is displayed just below Header\n\n\n  const days = () => {\n    const dateFormat = \"E\";\n    const days = [];\n    let startDate = startOfWeek(currentDate); // use date-fns startOfWeek along with currentDate state\n    // For each iteration, push a <div> into days Array\n\n    for (let i = 1; i < 8; i++) {\n      // Mon-Sunday (1-8)\n      days.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column col-center\",\n        children: format(addDays(startDate, i), dateFormat)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days row\",\n      children: days\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 16\n    }, this);\n  };\n\n  const onDateClick = day => {\n    setSelectedDate(day);\n  }; // sets how EACH cell is populated\n\n\n  const cells = () => {\n    const monthStart = startOfMonth(currentDate); // when does month start\n\n    const monthEnd = endOfMonth(monthStart); // when does month end\n\n    const startDate = startOfWeek(monthStart); // gets first day of CURRENT month, for our calendar to display on that month\n\n    const endDate = endOfWeek(monthEnd); // final date of the CURRENT month, use as a check against\n\n    const dateFormat = \"d\"; // render correct date in each cell\n\n    const rows = []; // render all weeks of given month\n\n    let days = []; // render each day in the week\n\n    let day = startDate; // points to start date of CURRENT month\n\n    let formattedDate = \"\"; // Not the best implementation, but I can't think of any other way to deal with the asynchronous nature of tasks.sort in Tasks.js\n\n    if (isPriority) {\n      tasks.sort((a, b) => {\n        if (a.priority > b.priority) return -1;else {\n          return 0;\n        }\n      });\n    } else {\n      tasks.sort((a, b) => {\n        if (moment(a.isoDay).unix() < moment(b.isoDay).unix()) return -1;else {\n          return 0;\n        }\n      });\n    } // Determines color of Tasks in storageArray (according to Priority)\n\n\n    function TaskToCalendarColoring(tasks, traversal) {\n      if (tasks[traversal]) {\n        switch (tasks[traversal].priority) {\n          case 3:\n            return \"Red\";\n\n          case 2:\n            return \"Yellow\";\n\n          case 1:\n            return \"Green\";\n\n          case 0:\n            return \"Black\";\n\n          default:\n            return \"Blue\";\n        }\n      }\n    }\n\n    let traversal = 0; // Initializing to zero ONCE\n    // Extract Tasks from database to Array\n\n    function TaskToCalendar(tasks, traversal, day) {\n      if (isActive === true) setActive(false);\n      let tmp = [];\n\n      while (tasks[traversal]) {\n        if (isSameDay(parseISO(tasks[traversal].isoDay), day)) {\n          tmp.push( /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: tasks[traversal].text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: TaskToCalendarColoring(tasks, traversal)\n              },\n              children: formatISO9075(parseISO(tasks[traversal].isoDay), {\n                representation: 'time'\n              }).slice(0, -3)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this)]\n          }, parseISO(tasks[traversal].isoDay) + tasks[traversal].text, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this));\n        }\n\n        traversal++;\n      }\n\n      return {\n        storageArray: tmp\n      };\n    }\n\n    while (day <= endDate) {\n      // Guarantees that loop runs for entirety of month\n      // For each iteration, push a single cell into days array\n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, dateFormat);\n        const cloneDay = day; // For each DAY, sweep through the tasks array ONCE ENTIRELY\n\n        const {\n          storageArray\n        } = TaskToCalendar(tasks, traversal, day);\n        traversal = 0; // RESET the modified traversal value\n\n        days.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `column cell ${!isSameMonth(day, monthStart) // Checking if each cell actually belongs to the current Month\n          ? \"disabled\" : isSameDay(day, currentDate) ? \"flashy\" : isSameDay(day, selectedDate) ? \"selected\" : \"\"}` // Checking if particular cell is same date as currentDate\n          ,\n          onClick: () => onDateClick(toDate(cloneDay)) // sets currentDate hook to whatever cell is being clicked on\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"number\",\n            children: formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg\",\n            children: formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this), storageArray]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this));\n        day = addDays(day, 1); // Increment to next day\n      } // Push the entire days array (as a single div) into rows array\n\n\n      rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [\" \", days, \" \"]\n      }, day, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)); // Clear the days array to start over for the next week (next 7 days)\n\n      days = [];\n    } // Once while loop is done, return the full rows array as single div\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 16\n    }, this);\n  }; // Rendering\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: header()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: days()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: cells()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Calendar, \"Y2OZnQcoFyzSVDCh0higNieGBZc=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/components/Calendar.js"],"names":["React","useEffect","useState","format","startOfWeek","endOfWeek","startOfMonth","endOfMonth","isSameMonth","isSameDay","addDays","addMonths","subMonths","toDate","parseISO","formatISO9075","moment","Calendar","tasks","isPriority","currentDate","setCurrentDate","Date","selectedDate","setSelectedDate","isActive","setActive","toggleClass","nextMonth","prevMonth","header","dateFormat","days","startDate","i","push","onDateClick","day","cells","monthStart","monthEnd","endDate","rows","formattedDate","sort","a","b","priority","isoDay","unix","TaskToCalendarColoring","traversal","TaskToCalendar","tmp","text","color","representation","slice","storageArray","cloneDay"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport \"./Calendar.css\";\nimport format from \"date-fns/format\"\nimport startOfWeek from 'date-fns/startOfWeek'\nimport endOfWeek from 'date-fns/endOfWeek'\nimport startOfMonth from 'date-fns/startOfMonth'\nimport endOfMonth from 'date-fns/endOfMonth'\nimport isSameMonth from 'date-fns/isSameMonth'\nimport isSameDay from 'date-fns/isSameDay'\nimport addDays from 'date-fns/addDays'\nimport addMonths from 'date-fns/addMonths'\nimport subMonths from \"date-fns/subMonths\"\nimport toDate from 'date-fns/toDate'\nimport parseISO from 'date-fns/parseISO'            // parse ISO to Date\nimport formatISO9075 from 'date-fns/formatISO9075'\nimport moment from \"moment\";  // Date to ISO 9075 format (with options)\n\nconst Calendar = ({tasks, isPriority}) => {\n    // Default State is current Day\n    const [currentDate, setCurrentDate] = useState(new Date());     // for Calendar to render proper month\n    const [selectedDate, setSelectedDate] = useState(new Date());   // styling for selected Date\n    const [isActive, setActive] = useState(false);\n\n    const toggleClass = () => {\n        setActive(!isActive)\n    }\n\n    // Add 1 to current Month\n    const nextMonth = () => { setCurrentDate(addMonths(currentDate, 1)); };\n\n    // Deduct 1 from current Month\n    const prevMonth = () => { setCurrentDate(subMonths(currentDate, 1)); };\n\n    // sets how Header (Month/Year) is displayed\n    const header = () => {\n        const dateFormat = \"MMMM yyyy\";\n        return (\n            <div className=\"header row flex-middle\">\n\n                <div className=\"column col-start\">\n                    <div className=\"icon\" onClick={prevMonth}>\n                        chevron_left\n                    </div>\n                </div>\n\n                <div className=\"column col-center\">\n                    <span>{format(currentDate, dateFormat)}</span>\n                </div>\n\n                <div className=\"column col-end\">\n                    <div className=\"icon\" onClick={nextMonth}>\n                        chevron_right\n                    </div>\n                </div>\n\n            </div>\n        );\n    };\n\n\n    // sets how (Monday-Sunday) is displayed just below Header\n    const days = () => {\n        const dateFormat = \"E\";\n        const days = [];\n        let startDate = startOfWeek(currentDate);   // use date-fns startOfWeek along with currentDate state\n\n        // For each iteration, push a <div> into days Array\n        for (let i = 1; i < 8; i++) {   // Mon-Sunday (1-8)\n            days.push(\n                <div className=\"column col-center\" key={i}>\n                    {format(addDays(startDate, i), dateFormat)}\n                </div>\n            );\n        }\n        return <div className=\"days row\">{days}</div>;\n    };\n\n    const onDateClick = day => {\n        setSelectedDate(day);\n    }\n\n    // sets how EACH cell is populated\n    const cells = () => {\n        const monthStart = startOfMonth(currentDate);    // when does month start\n        const monthEnd = endOfMonth(monthStart);         // when does month end\n        const startDate = startOfWeek(monthStart);       // gets first day of CURRENT month, for our calendar to display on that month\n        const endDate = endOfWeek(monthEnd);             // final date of the CURRENT month, use as a check against\n        const dateFormat = \"d\";                          // render correct date in each cell\n        const rows = [];                                 // render all weeks of given month\n        let days = [];                                   // render each day in the week\n        let day = startDate;                             // points to start date of CURRENT month\n        let formattedDate = \"\";\n\n        // Not the best implementation, but I can't think of any other way to deal with the asynchronous nature of tasks.sort in Tasks.js\n        if (isPriority) {\n            tasks.sort((a, b) => {\n                if (a.priority > b.priority) return -1\n                else { return 0 }\n            })\n        }\n\n        else {\n            tasks.sort((a,b) => {\n                if ( (moment(a.isoDay).unix()) < (moment(b.isoDay).unix()) ) return -1\n                else {return 0}\n            })\n        }\n\n        // Determines color of Tasks in storageArray (according to Priority)\n        function TaskToCalendarColoring (tasks,traversal) {\n            if (tasks[traversal]) {\n                switch (tasks[traversal].priority) {\n                    case 3 : return \"Red\"\n                    case 2 : return \"Yellow\"\n                    case 1 : return \"Green\"\n                    case 0 : return \"Black\"\n                    default : return \"Blue\"\n                }\n            }\n        }\n\n        let traversal = 0;  // Initializing to zero ONCE\n\n        // Extract Tasks from database to Array\n        function TaskToCalendar(tasks, traversal, day) {\n            if (isActive === true)\n                setActive(false)\n            let tmp = [];\n            while (tasks[traversal]) {\n                if (isSameDay(parseISO(tasks[traversal].isoDay), day)) {\n                    tmp.push(\n                        <div key={parseISO(tasks[traversal].isoDay) + tasks[traversal].text}>\n                        <span\n                            //className = {isActive ? 'activeDate' : null}\n                            //onClick = { () => setActive(!isActive) }\n                        >\n                            {tasks[traversal].text}\n                        </span>\n                            <span style={{color: TaskToCalendarColoring(tasks, traversal)}}>\n                            {formatISO9075(parseISO(tasks[traversal].isoDay), {representation: 'time'}).slice(0, -3)}\n                        </span>\n                        </div>)\n                }\n\n                traversal++\n            }\n            return {storageArray: tmp}\n        }\n\n        while (day <= endDate) {   // Guarantees that loop runs for entirety of month\n            // For each iteration, push a single cell into days array\n            for (let i = 0; i < 7; i++) {\n                formattedDate = format(day, dateFormat);\n                const cloneDay = day;\n\n                // For each DAY, sweep through the tasks array ONCE ENTIRELY\n                const {storageArray} = TaskToCalendar(tasks, traversal, day)\n                traversal = 0   // RESET the modified traversal value\n\n                days.push(\n                    <div\n                        className={`column cell ${!isSameMonth(day, monthStart)    // Checking if each cell actually belongs to the current Month\n                            ? \"disabled\" :\n                            isSameDay(day, currentDate) ? \"flashy\" :\n                                isSameDay(day, selectedDate) ? \"selected\" : \"\"}`}  // Checking if particular cell is same date as currentDate\n                        key={day}\n                        onClick={() => onDateClick(toDate(cloneDay))}              // sets currentDate hook to whatever cell is being clicked on\n                    >\n                        <span className=\"number\">{formattedDate}</span>\n                        <span className=\"bg\">{formattedDate}</span>\n                        {storageArray}\n                    </div>\n                );\n                day = addDays(day, 1);     // Increment to next day\n            }\n\n            // Push the entire days array (as a single div) into rows array\n            rows.push(\n                <div className=\"row\" key={day}> {days} </div>\n            );\n\n            // Clear the days array to start over for the next week (next 7 days)\n            days = [];\n        }\n        // Once while loop is done, return the full rows array as single div\n        return <div className=\"body\">{rows}</div>;\n    }\n\n    // Rendering\n    return (\n        <div className=\"calendar\">\n            <div>{header()}</div>\n            <div>{days()}</div>\n            <div>{cells()}</div>\n        </div>\n    );\n};\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}