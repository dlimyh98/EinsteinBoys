{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { useEffect, useState } from 'react'; // Deals with side-effects, Component needs to do something AFTER rendering\n\nimport Authentication from './components/Authentication';\nimport Axios from \"axios\";\nimport useAxios from 'axios-hooks'; // App (Global) State.\n// Not best practice, will use Redux to keep track of JS States in future\n// Components can be Functions (with hooks) or Classes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // fetchTasks (from Server) function, declared outside so that we can reuse it in other places\n  const fetchTasks = () => {\n    let storage;\n    Axios({\n      method: \"GET\",\n      withCredentials: true,\n      url: \"http://localhost:4000/user\"\n    }).then(async res => {\n      //const userId = res.data\n      Axios({\n        method: \"GET\",\n        withCredentials: true,\n        url: \"http://localhost:4000/tasks\"\n      }).then(res => {\n        // res.data to access task array\n        setTasks(res.data);\n        storage = res.data;\n      });\n    });\n    console.log(\"Hello\");\n    console.log(storage);\n  };\n\n  const [tasks, setTasks] = useState([]);\n  const [showAddButton, setshowAddButton] = useState(false);\n  const [isAuth, setisAuth] = useState(false);\n  useEffect(() => {\n    fetchTasks();\n  }, [tasks]);\n\n  const onAdd = TaskAdded => {\n    Axios({\n      method: \"POST\",\n      data: TaskAdded,\n      withCredentials: true,\n      url: \"http://localhost:4000/tasks\"\n    }).then(res => {\n      setTasks([...tasks, TaskAdded]);\n    });\n  };\n\n  const deleteTask = async TaskDelete => {\n    Axios({\n      method: \"DELETE\",\n      data: TaskDelete,\n      withCredentials: true,\n      url: \"http://localhost:4000/tasks\"\n    }).then(res => {\n      //console.log(res.data.task)\n      fetchTasks();\n    });\n  }; // Return is JSX, not HTML\n  // Can only return one single Parent Element\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isAuth && /*#__PURE__*/_jsxDEV(Authentication, {\n      setisAuth: setisAuth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 23\n    }, this), isAuth && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        buttonColorDecider: showAddButton,\n        toggleAdd: () => setshowAddButton(!showAddButton)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }, this), \" \", showAddButton ? /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: onAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 36\n      }, this) : '', \" \", tasks.length !== 0 ?\n      /*#__PURE__*/\n\n      /* Pass in deleteTask function as Prop, to Tasks.js\n         - Tasks.js contains Task.js\n         - Task.js contains the button itself, that is the trigger point for deletion\n         Pass in addTask function as Prop, to AddTask.js\n       */\n      _jsxDEV(Tasks, {\n        tasks: tasks\n        /* Passing in tasks as Prop */\n        ,\n        onDelete: deleteTask\n        /* Passing in deleteTask (FUNCTION) as Prop, into variable onDelete */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 31\n      }, this) : 'No Tasks Today!']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"4AYNp4/xbpX8iE6m2r8YQ04cdrc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/App.js"],"names":["Header","Tasks","AddTask","useEffect","useState","Authentication","Axios","useAxios","App","fetchTasks","storage","method","withCredentials","url","then","res","setTasks","data","console","log","tasks","showAddButton","setshowAddButton","isAuth","setisAuth","onAdd","TaskAdded","deleteTask","TaskDelete","length"],"mappings":"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","sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport {useEffect, useState} from 'react' // Deals with side-effects, Component needs to do something AFTER rendering\nimport Authentication from './components/Authentication'\nimport Axios from \"axios\"\nimport useAxios from 'axios-hooks'\n\n// App (Global) State.\n// Not best practice, will use Redux to keep track of JS States in future\n// Components can be Functions (with hooks) or Classes\nfunction App() {\n    // fetchTasks (from Server) function, declared outside so that we can reuse it in other places\n    const fetchTasks = () => {\n        let storage\n        Axios({\n            method : \"GET\",\n            withCredentials : true,\n            url :\"http://localhost:4000/user\"\n        }).then( async (res) => {\n            //const userId = res.data\n            Axios ({\n                method : \"GET\",\n                withCredentials : true,\n                url : \"http://localhost:4000/tasks\"\n            }).then( (res) => {\n                // res.data to access task array\n                setTasks(res.data)\n                storage = res.data\n            })\n        })\n        console.log(\"Hello\")\n        console.log(storage)\n    }\n\n    const [tasks, setTasks] = useState([] )\n    const [showAddButton, setshowAddButton] = useState(false)\n    const [isAuth, setisAuth] = useState(false)\n\n    useEffect(() => {\n            fetchTasks()\n        }, [tasks]\n    )\n\n    const onAdd = (TaskAdded) => {\n        Axios({\n            method : \"POST\",\n            data : TaskAdded,\n            withCredentials : true,\n            url: \"http://localhost:4000/tasks\",\n        }).then((res) => {\n            setTasks([...tasks, TaskAdded])\n        })\n    }\n\n    const deleteTask = async(TaskDelete) => {\n        Axios({\n            method : \"DELETE\",\n            data : TaskDelete,\n            withCredentials : true,\n            url : \"http://localhost:4000/tasks\",\n        }).then((res) => {\n            //console.log(res.data.task)\n            fetchTasks()\n        })\n    }\n\n  // Return is JSX, not HTML\n  // Can only return one single Parent Element\n  return (\n      <>\n          {!isAuth && <Authentication setisAuth = {setisAuth} />}\n\n          {isAuth &&\n              <div className='container'>\n                  <Header\n                      buttonColorDecider={showAddButton}\n                      toggleAdd={() => setshowAddButton(!showAddButton)}\n                  /> {/* Button is in <Header>, so we must pass down the State Hook function as a Prop. We also define the State Hook function here */}\n\n                  {showAddButton ? <AddTask\n                      onAdd={onAdd}/> : ''} {/* Event Handlers must be function or function reference, for setshowAddButton*/}\n                  {\n                      tasks.length !== 0 ?\n                          (\n                              /* Pass in deleteTask function as Prop, to Tasks.js\n                                 - Tasks.js contains Task.js\n                                 - Task.js contains the button itself, that is the trigger point for deletion\n                                 Pass in addTask function as Prop, to AddTask.js\n                               */\n                              <Tasks\n                                  tasks={tasks}         /* Passing in tasks as Prop */\n                                  onDelete={deleteTask} /* Passing in deleteTask (FUNCTION) as Prop, into variable onDelete */\n                              />\n                          )\n                          :\n                          'No Tasks Today!'\n                  }\n\n              </div>\n          }\n          </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}