{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/components/Tasks.js\";\nimport Task from './Task'; // Destructuring tasks passed in from App.js\n// Destructuring onDelete passed in from App.js\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Tasks = function ({\n  tasks,\n  onDelete\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"(tasks) && \", tasks.map(\n    /* For each index in tasks Object Array, run the function defined below on each index*/\n    (task, index) =>\n    /*#__PURE__*/\n\n    /* task is the 'val' argument for .map function. If only one value in argument, it will be val */\n\n    /* Function returns a user-defined Task Component */\n    _jsxDEV(Task, {\n      /* Store each task.id into key variable */\n      task: task\n      /* Pass in task as Prop into Task.js, using variable task */\n      ,\n      onDelete: onDelete\n      /* Pass in onDelete as Prop into Task.js, using variable onDelete*/\n\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 25\n    }, this))]\n  }, void 0, true);\n};\n\n_c = Tasks;\nexport default Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/components/Tasks.js"],"names":["Task","Tasks","tasks","onDelete","map","task","index"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,QAAjB,C,CAEA;AACA;;;;;AACA,MAAMC,KAAK,GAAG,UAAU;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAV,EACd;AACI,sBACI;AAAA,8BAEQD,KAAK,CAACE,GAAN;AAA4B;AACxB,KAACC,IAAD,EAAOC,KAAP;AAAA;;AAAwB;;AACpB;AACA,YAAC,IAAD;AAC0B;AACtB,MAAA,IAAI,EAAID;AAAc;AAF1B;AAGI,MAAA,QAAQ,EAAIF;AAAU;;AAH1B,OACWG,KADX;AAAA;AAAA;AAAA;AAAA,YAHR,CAFR;AAAA,kBADJ;AAgBH,CAlBD;;KAAML,K;AAoBN,eAAeA,KAAf","sourcesContent":["import Task from './Task'\n\n// Destructuring tasks passed in from App.js\n// Destructuring onDelete passed in from App.js\nconst Tasks = function( {tasks, onDelete} )\n{\n    return(\n        <>\n            (tasks) && {\n                tasks.map(                  /* For each index in tasks Object Array, run the function defined below on each index*/\n                    (task, index) => (      /* task is the 'val' argument for .map function. If only one value in argument, it will be val */\n                        /* Function returns a user-defined Task Component */\n                        <Task\n                            key = {index}         /* Store each task.id into key variable */\n                            task = {task}         /* Pass in task as Prop into Task.js, using variable task */\n                            onDelete = {onDelete} /* Pass in onDelete as Prop into Task.js, using variable onDelete*/\n                        />\n                    )\n                )\n            }\n        </>\n    )\n}\n\nexport default Tasks\n"]},"metadata":{},"sourceType":"module"}