{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { useEffect, useState } from 'react'; // Deals with side-effects, Component needs to do something AFTER rendering\n\nimport Authentication from './components/Authentication';\nimport Axios from \"axios\";\nimport useAxios from 'axios-hooks'; // App (Global) State.\n// Not best practice, will use Redux to keep track of JS States in future\n// Components can be Functions (with hooks) or Classes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [showAddButton, setshowAddButton] = useState(false);\n  useEffect(() => {\n    const getTasks = async () => {\n      console.log(fetchTasks);\n      console.log(fetchTasks());\n      const TasksFromServer = await fetchTasks();\n      setTasks(TasksFromServer);\n    };\n\n    getTasks();\n  }, []); // fetchTasks (from Server) function, declared outside so that we can reuse it in other places\n\n  const fetchTasks = async () => {\n    // async keyword, put infront of function keyword to turn it into async function// Invoking the async function now, returns a promise (async function return values guaranteed to be promises)\n    const response = await fetch('http://localhost:5000/tasks');\n    const data = await response.json(); //const data = await Axios.get('http://localhost:4000/tasks')\n\n    return data;\n  };\n  /*const fetchTasks = () => {\n      Axios({\n          method: \"GET\",\n          withCredentials: true,\n          url: \"http://localhost:4000/tasks\"\n      }).then((res) => {\n          return res.data\n      })\n  }*/\n\n\n  const onAdd = TaskAdded => {\n    Axios({\n      method: \"POST\",\n      data: TaskAdded,\n      withCredentials: true,\n      url: \"http://localhost:4000/tasks\"\n    }).then(res => {\n      setTasks([...tasks, TaskAdded]);\n    });\n  };\n\n  const deleteTask = async TaskDelete => {\n    Axios({\n      method: \"DELETE\",\n      data: TaskDelete,\n      withCredentials: true,\n      url: \"http://localhost:4000/tasks\"\n    }).then(res => {// Update UI\n    });\n  };\n\n  const [isAuth, setisAuth] = useState(false); // Return is JSX, not HTML\n  // Can only return one single Parent Element\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isAuth && /*#__PURE__*/_jsxDEV(Authentication, {\n      setisAuth: setisAuth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 23\n    }, this), isAuth && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        buttonColorDecider: showAddButton,\n        toggleAdd: () => setshowAddButton(!showAddButton)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }, this), \" \", showAddButton ? /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: onAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 36\n      }, this) : '', \" \", tasks.length !== 0 ?\n      /*#__PURE__*/\n\n      /* Pass in deleteTask function as Prop, to Tasks.js\n         - Tasks.js contains Task.js\n         - Task.js contains the button itself, that is the trigger point for deletion\n         Pass in addTask function as Prop, to AddTask.js\n       */\n      _jsxDEV(Tasks, {\n        tasks: tasks\n        /* Passing in tasks as Prop */\n        ,\n        onDelete: deleteTask\n        /* Passing in deleteTask (FUNCTION) as Prop, into variable onDelete */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 31\n      }, this) : 'No Tasks Today!']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"fWU9oSie7raVnjdbIhOrXMzi9OI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/App.js"],"names":["Header","Tasks","AddTask","useEffect","useState","Authentication","Axios","useAxios","App","tasks","setTasks","showAddButton","setshowAddButton","getTasks","console","log","fetchTasks","TasksFromServer","response","fetch","data","json","onAdd","TaskAdded","method","withCredentials","url","then","res","deleteTask","TaskDelete","isAuth","setisAuth","length"],"mappings":"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","sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport {useEffect, useState} from 'react' // Deals with side-effects, Component needs to do something AFTER rendering\nimport Authentication from './components/Authentication'\nimport Axios from \"axios\"\nimport useAxios from 'axios-hooks'\n\n// App (Global) State.\n// Not best practice, will use Redux to keep track of JS States in future\n// Components can be Functions (with hooks) or Classes\nfunction App() {\n    const [tasks, setTasks] = useState( [])\n    const [showAddButton, setshowAddButton] = useState(false)\n\n    useEffect(() => {\n            const getTasks = async () => {\n                console.log(fetchTasks)\n                console.log(fetchTasks())\n                const TasksFromServer = await (fetchTasks())\n                setTasks(TasksFromServer)\n            }\n            getTasks()\n        }, []\n    )\n\n    // fetchTasks (from Server) function, declared outside so that we can reuse it in other places\n    const fetchTasks = async() => {                                           // async keyword, put infront of function keyword to turn it into async function// Invoking the async function now, returns a promise (async function return values guaranteed to be promises)\n        const response = await fetch('http://localhost:5000/tasks')\n        const data = await response.json()\n        //const data = await Axios.get('http://localhost:4000/tasks')\n        return data\n    }\n\n    /*const fetchTasks = () => {\n        Axios({\n            method: \"GET\",\n            withCredentials: true,\n            url: \"http://localhost:4000/tasks\"\n        }).then((res) => {\n            return res.data\n        })\n    }*/\n\n    const onAdd = (TaskAdded) => {\n        Axios({\n            method : \"POST\",\n            data : TaskAdded,\n            withCredentials : true,\n            url: \"http://localhost:4000/tasks\",\n        }).then((res) => {\n            setTasks([...tasks, TaskAdded])\n        })\n    }\n\n    const deleteTask = async(TaskDelete) => {\n        Axios({\n            method : \"DELETE\",\n            data : TaskDelete,\n            withCredentials : true,\n            url : \"http://localhost:4000/tasks\",\n        }).then((res) => {\n            // Update UI\n        })\n    }\n\n    const [isAuth, setisAuth] = useState(false)\n  // Return is JSX, not HTML\n  // Can only return one single Parent Element\n  return (\n      <>\n          {!isAuth && <Authentication setisAuth = {setisAuth} />}\n\n          {isAuth &&\n              <div className='container'>\n                  <Header\n                      buttonColorDecider={showAddButton}\n                      toggleAdd={() => setshowAddButton(!showAddButton)}\n                  /> {/* Button is in <Header>, so we must pass down the State Hook function as a Prop. We also define the State Hook function here */}\n\n                  {showAddButton ? <AddTask\n                      onAdd={onAdd}/> : ''} {/* Event Handlers must be function or function reference, for setshowAddButton*/}\n                  {\n                      tasks.length !== 0 ?\n                          (\n                              /* Pass in deleteTask function as Prop, to Tasks.js\n                                 - Tasks.js contains Task.js\n                                 - Task.js contains the button itself, that is the trigger point for deletion\n                                 Pass in addTask function as Prop, to AddTask.js\n                               */\n                              <Tasks\n                                  tasks={tasks}         /* Passing in tasks as Prop */\n                                  onDelete={deleteTask} /* Passing in deleteTask (FUNCTION) as Prop, into variable onDelete */\n                              />\n                          )\n                          :\n                          'No Tasks Today!'\n                  }\n\n              </div>\n          }\n          </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}