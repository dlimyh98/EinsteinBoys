{"ast":null,"code":"var _jsxFileName = \"/Users/Damien/tasktracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { useState } from 'react';\nimport { useEffect } from 'react'; // Deals with side-effects, Component needs to do something AFTER rendering\n// Components can be Functions (with hooks) or Classes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // App (Global) State.\n  // Not best practice, will use Redux to keep track of JS States in future\n  // tasks is RETURNED stateful value, default will be initialState (when event not triggered yet)\n  // setTasks is function to change State. Reusable in different contexts\n  // initialize useState to default value as seen below\n  const [tasks, setTasks] = useState([]); // Fetch data from db.json, so empty brackets here\n\n  const [showAddButton, setshowAddButton] = useState(false); // UseEffect function. Input is the function you passed in (the effect you want to create).\n  // React will call this function after the DOM updates\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const response = await fetch('http://localhost:5000/tasks');\n      const data = await response.json();\n      console.log(data);\n    };\n  }); // Function to toggle Reminders on Task\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(ReminderTasks => ReminderTasks.id === id ? { ...ReminderTasks,\n      reminder: !ReminderTasks.reminder // Rest Operator\n\n    } : ReminderTasks));\n  }; // Function to add Task\n  // Input TaskAdded does not need to be explicitly defined in App.js (it is just a placeholder, like C)\n  // TaskAdded input is dependent on AddTask.js (it is task, date, reminder)\n\n\n  const onAdd = TaskAdded => {\n    // Without a database, we will simply use RNG to store the different Tasks\n    const id = Math.floor(Math.random() * 10000) + 1; // Create an Object representing newly added Task, using spread operator for TaskAdded (containing text,day,reminder)\n\n    const newTask = {\n      id,\n      ...TaskAdded\n    }; // Define (reuse) the setTasks function to include the new task\n    // Copy over the pre-existing TASKS (the Stateful Value above)\n    // Append newTask to it\n\n    setTasks([...tasks, newTask]);\n  }; // Function to delete Task (known as deleteTask in Tasks.js / Task.js, since that is what we called it as a Prop)\n\n\n  const deleteTask = id => // Arrow Notation, taking in id as input\n  {\n    setTasks(tasks.filter(FilteredTask => FilteredTask.id !== id));\n  }; // Return is JSX, not HTML\n  // Can only return one single Parent Element\n\n  /* Pass in deleteTask function as Prop, to Tasks.js\n     - Tasks.js contains Task.js\n     - Task.js contains the button itself, that is the trigger point for deletion\n      Pass in addTask function as Prop, to AddTask.js\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      buttonColorDecider: showAddButton,\n      toggleAdd: () => setshowAddButton(!showAddButton)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), \"      \", showAddButton ? /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: onAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 26\n    }, this) : '', \"                 \", tasks.length !== 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks\n      /* Passing in tasks as Prop */\n      ,\n      onDelete: deleteTask\n      /* Passing in deleteTask (FUNCTION) as Prop, into variable onDelete */\n      ,\n      toggleReminder: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 20\n    }, this) : 'No Tasks Today!']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"voSfSYitr6OBIF679Ndd0aVzGgs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Damien/tasktracker/src/App.js"],"names":["Header","Tasks","AddTask","useState","useEffect","App","tasks","setTasks","showAddButton","setshowAddButton","fetchTasks","response","fetch","data","json","console","log","toggleReminder","id","map","ReminderTasks","reminder","onAdd","TaskAdded","Math","floor","random","newTask","deleteTask","filter","FilteredTask","length"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,SAAQC,SAAR,QAAwB,OAAxB,C,CAAkC;AAElC;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AAEf;AACA;AAEI;AACA;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC,CARW,CAQiC;;AAE5C,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,KAAD,CAAlD,CAVW,CAYX;AACA;;AACAC,EAAAA,SAAS,CAAE,MAAM;AACb,UAAMM,UAAU,GAAG,YAAW;AAC3B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAECC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACH,KALD;AAMC,GAPI,CAAT,CAdW,CAwBX;;AACA,QAAMI,cAAc,GAAIC,EAAD,IACvB;AACIX,IAAAA,QAAQ,CAAED,KAAK,CAACa,GAAN,CACLC,aAAD,IACIA,aAAa,CAACF,EAAd,KAAqBA,EAArB,GACI,EACI,GAAGE,aADP;AACsBC,MAAAA,QAAQ,EAAG,CAACD,aAAa,CAACC,QADhD,CAC4D;;AAD5D,KADJ,GAGQD,aALN,CAAF,CAAR;AAQH,GAVD,CAzBW,CAqCX;AACA;AACA;;;AACA,QAAME,KAAK,GAAIC,SAAD,IACd;AACI;AACA,UAAML,EAAE,GAAGM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,IAAoC,CAA/C,CAFJ,CAII;;AACA,UAAMC,OAAO,GAAG;AAACT,MAAAA,EAAD;AAAK,SAAGK;AAAR,KAAhB,CALJ,CAOI;AACA;AACA;;AACAhB,IAAAA,QAAQ,CAAE,CAAC,GAAGD,KAAJ,EAAWqB,OAAX,CAAF,CAAR;AACH,GAZD,CAxCW,CAsDX;;;AACA,QAAMC,UAAU,GAAIV,EAAD,IAAW;AAC9B;AACIX,IAAAA,QAAQ,CAAED,KAAK,CAACuB,MAAN,CAAeC,YAAD,IAAkBA,YAAY,CAACZ,EAAb,KAAoBA,EAApD,CAAF,CAAR;AACH,GAHD,CAvDW,CA4Db;AACA;;AAEA;AACF;AACA;AACA;AACA;;;AAEE,sBACE;AAAK,IAAA,SAAS,EAAG,WAAjB;AAAA,4BAEI,QAAC,MAAD;AACI,MAAA,kBAAkB,EAAIV,aAD1B;AAEI,MAAA,SAAS,EAAK,MAAMC,gBAAgB,CAAC,CAACD,aAAF;AAFxC;AAAA;AAAA;AAAA;AAAA,YAFJ,YAKKA,aAAa,gBAAG,QAAC,OAAD;AAAS,MAAA,KAAK,EAAIc;AAAlB;AAAA;AAAA;AAAA;AAAA,YAAH,GAAgC,EALlD,uBAOOhB,KAAK,CAACyB,MAAN,KAAiB,CAAjB,gBAEQ,QAAC,KAAD;AACI,MAAA,KAAK,EAAIzB;AAAe;AAD5B;AAEI,MAAA,QAAQ,EAAIsB;AAAY;AAF5B;AAGI,MAAA,cAAc,EAAIX;AAHtB;AAAA;AAAA;AAAA;AAAA,YAFR,GASI,iBAhBX;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA1FQZ,G;;KAAAA,G;AA4FT,eAAeA,GAAf","sourcesContent":["import Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\nimport {useState} from 'react'\nimport {useEffect} from 'react'   // Deals with side-effects, Component needs to do something AFTER rendering\n\n// Components can be Functions (with hooks) or Classes\nfunction App() {\n\n// App (Global) State.\n// Not best practice, will use Redux to keep track of JS States in future\n\n    // tasks is RETURNED stateful value, default will be initialState (when event not triggered yet)\n    // setTasks is function to change State. Reusable in different contexts\n    // initialize useState to default value as seen below\n    const [tasks, setTasks] = useState([])      // Fetch data from db.json, so empty brackets here\n\n    const [showAddButton, setshowAddButton] = useState(false)\n\n    // UseEffect function. Input is the function you passed in (the effect you want to create).\n    // React will call this function after the DOM updates\n    useEffect( () => {\n        const fetchTasks = async() => {\n           const response = await fetch('http://localhost:5000/tasks')\n           const data = await response.json()\n\n            console.log(data)\n        }\n        }\n    )\n\n    // Function to toggle Reminders on Task\n    const toggleReminder = (id) =>\n    {\n        setTasks( tasks.map(\n            (ReminderTasks) => (\n                ReminderTasks.id === id ?\n                    {\n                        ...ReminderTasks, reminder : !ReminderTasks.reminder    // Rest Operator\n                    } : ReminderTasks\n            )\n        ))\n    }\n\n    // Function to add Task\n    // Input TaskAdded does not need to be explicitly defined in App.js (it is just a placeholder, like C)\n    // TaskAdded input is dependent on AddTask.js (it is task, date, reminder)\n    const onAdd = (TaskAdded) =>\n    {\n        // Without a database, we will simply use RNG to store the different Tasks\n        const id = Math.floor(Math.random() * 10000) + 1\n\n        // Create an Object representing newly added Task, using spread operator for TaskAdded (containing text,day,reminder)\n        const newTask = {id, ...TaskAdded}\n\n        // Define (reuse) the setTasks function to include the new task\n        // Copy over the pre-existing TASKS (the Stateful Value above)\n        // Append newTask to it\n        setTasks( [...tasks, newTask])\n    }\n\n    // Function to delete Task (known as deleteTask in Tasks.js / Task.js, since that is what we called it as a Prop)\n    const deleteTask = (id) =>    // Arrow Notation, taking in id as input\n    {\n        setTasks( tasks.filter( (FilteredTask) => FilteredTask.id !== id ) )\n    }\n\n  // Return is JSX, not HTML\n  // Can only return one single Parent Element\n\n  /* Pass in deleteTask function as Prop, to Tasks.js\n     - Tasks.js contains Task.js\n     - Task.js contains the button itself, that is the trigger point for deletion\n\n     Pass in addTask function as Prop, to AddTask.js\n   */\n  return (\n    <div className = 'container'>\n\n        <Header\n            buttonColorDecider = {showAddButton}\n            toggleAdd = { () => setshowAddButton(!showAddButton) }/>      {/* Button is in <Header>, so we must pass down the State Hook function as a Prop. We also define the State Hook function here */}\n        {showAddButton ? <AddTask onAdd = {onAdd}/> : ''}                 {/* Event Handlers must be function or function reference, for setshowAddButton*/}\n        {\n           tasks.length !== 0 ?\n               (\n                   <Tasks\n                       tasks = {tasks}         /* Passing in tasks as Prop */\n                       onDelete = {deleteTask} /* Passing in deleteTask (FUNCTION) as Prop, into variable onDelete */\n                       toggleReminder = {toggleReminder}\n                   />\n               )\n               :\n               'No Tasks Today!'\n        }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}