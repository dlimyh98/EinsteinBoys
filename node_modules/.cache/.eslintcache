[{"/Users/Damien/tasktracker/src/index.js":"1","/Users/Damien/tasktracker/src/App.js":"2","/Users/Damien/tasktracker/src/reportWebVitals.js":"3","/Users/Damien/tasktracker/src/components/Header.js":"4","/Users/Damien/tasktracker/src/components/Button.js":"5","/Users/Damien/tasktracker/src/components/Tasks.js":"6","/Users/Damien/tasktracker/src/components/Task.js":"7","/Users/Damien/tasktracker/src/components/AddTask.js":"8","/Users/Damien/tasktracker/src/components/Authentication.js":"9","/Users/Damien/tasktracker/src/components/Calendar.js":"10"},{"size":663,"mtime":1622091068000,"results":"11","hashOfConfig":"12"},{"size":3527,"mtime":1623093418536,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1622091068000,"results":"14","hashOfConfig":"12"},{"size":670,"mtime":1622425607106,"results":"15","hashOfConfig":"12"},{"size":556,"mtime":1622091068000,"results":"16","hashOfConfig":"12"},{"size":1437,"mtime":1623093868206,"results":"17","hashOfConfig":"12"},{"size":1589,"mtime":1622873011437,"results":"18","hashOfConfig":"12"},{"size":4627,"mtime":1623063482788,"results":"19","hashOfConfig":"12"},{"size":3747,"mtime":1622736774394,"results":"20","hashOfConfig":"12"},{"size":7855,"mtime":1623129592410,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"z76kdt",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/Users/Damien/tasktracker/src/index.js",[],["44","45"],"/Users/Damien/tasktracker/src/App.js",[],"/Users/Damien/tasktracker/src/reportWebVitals.js",[],"/Users/Damien/tasktracker/src/components/Header.js",[],"/Users/Damien/tasktracker/src/components/Button.js",[],"/Users/Damien/tasktracker/src/components/Tasks.js",[],"/Users/Damien/tasktracker/src/components/Task.js",[],"/Users/Damien/tasktracker/src/components/AddTask.js",[],"/Users/Damien/tasktracker/src/components/Authentication.js",[],"/Users/Damien/tasktracker/src/components/Calendar.js",["46","47"],"import React, {useEffect, useState} from \"react\";\nimport \"./Calendar.css\";\nimport format from \"date-fns/format\"\nimport startOfWeek from 'date-fns/startOfWeek'\nimport endOfWeek from 'date-fns/endOfWeek'\nimport startOfMonth from 'date-fns/startOfMonth'\nimport endOfMonth from 'date-fns/endOfMonth'\nimport isSameMonth from 'date-fns/isSameMonth'\nimport isSameDay from 'date-fns/isSameDay'\nimport addDays from 'date-fns/addDays'\nimport addMonths from 'date-fns/addMonths'\nimport subMonths from \"date-fns/subMonths\"\nimport toDate from 'date-fns/toDate'\nimport parseISO from 'date-fns/parseISO'            // parse ISO to Date\nimport formatISO9075 from 'date-fns/formatISO9075'\nimport moment from \"moment\";  // Date to ISO 9075 format (with options)\n\nconst Calendar = ({tasks, isPriority}) => {\n    // Default State is current Day\n    const [currentDate, setCurrentDate] = useState(new Date());     // for Calendar to render proper month\n    const [selectedDate, setSelectedDate] = useState(new Date());   // styling for selected Date\n    const [isActive, setActive] = useState(false);\n\n    const toggleClass = () => {\n        setActive(!isActive)\n    }\n\n    // Add 1 to current Month\n    const nextMonth = () => { setCurrentDate(addMonths(currentDate, 1)); };\n\n    // Deduct 1 from current Month\n    const prevMonth = () => { setCurrentDate(subMonths(currentDate, 1)); };\n\n    // sets how Header (Month/Year) is displayed\n    const header = () => {\n        const dateFormat = \"MMMM yyyy\";\n        return (\n            <div className=\"header row flex-middle\">\n\n                <div className=\"column col-start\">\n                    <div className=\"icon\" onClick={prevMonth}>\n                        chevron_left\n                    </div>\n                </div>\n\n                <div className=\"column col-center\">\n                    <span>{format(currentDate, dateFormat)}</span>\n                </div>\n\n                <div className=\"column col-end\">\n                    <div className=\"icon\" onClick={nextMonth}>\n                        chevron_right\n                    </div>\n                </div>\n\n            </div>\n        );\n    };\n\n\n    // sets how (Monday-Sunday) is displayed just below Header\n    const days = () => {\n        const dateFormat = \"E\";\n        const days = [];\n        let startDate = startOfWeek(currentDate);   // use date-fns startOfWeek along with currentDate state\n\n        // For each iteration, push a <div> into days Array\n        for (let i = 1; i < 8; i++) {   // Mon-Sunday (1-8)\n            days.push(\n                <div className=\"column col-center\" key={i}>\n                    {format(addDays(startDate, i), dateFormat)}\n                </div>\n            );\n        }\n        return <div className=\"days row\">{days}</div>;\n    };\n\n    const onDateClick = day => {\n        setSelectedDate(day);\n    }\n\n    // sets how EACH cell is populated\n    const cells = () => {\n        const monthStart = startOfMonth(currentDate);    // when does month start\n        const monthEnd = endOfMonth(monthStart);         // when does month end\n        const startDate = startOfWeek(monthStart);       // gets first day of CURRENT month, for our calendar to display on that month\n        const endDate = endOfWeek(monthEnd);             // final date of the CURRENT month, use as a check against\n        const dateFormat = \"d\";                          // render correct date in each cell\n        const rows = [];                                 // render all weeks of given month\n        let days = [];                                   // render each day in the week\n        let day = startDate;                             // points to start date of CURRENT month\n        let formattedDate = \"\";\n\n        // Not the best implementation, but I can't think of any other way to deal with the asynchronous nature of tasks.sort in Tasks.js\n        if (isPriority) {\n            tasks.sort((a, b) => {\n                if (a.priority > b.priority) return -1\n                else { return 0 }\n            })\n        }\n\n        else {\n            tasks.sort((a,b) => {\n                if ( (moment(a.isoDay).unix()) < (moment(b.isoDay).unix()) ) return -1\n                else {return 0}\n            })\n        }\n\n        // Determines color of Tasks in storageArray (according to Priority)\n        function TaskToCalendarColoring (tasks,traversal) {\n            if (tasks[traversal]) {\n                switch (tasks[traversal].priority) {\n                    case 3 : return \"Red\"\n                    case 2 : return \"Yellow\"\n                    case 1 : return \"Green\"\n                    case 0 : return \"Black\"\n                    default : return \"Blue\"\n                }\n            }\n        }\n\n        let traversal = 0;  // Initializing to zero ONCE\n\n        // Extract Tasks from database to Array\n        function TaskToCalendar(tasks, traversal, day) {\n\n            let tmp = [];\n            while (tasks[traversal]) {\n                if (isSameDay(parseISO(tasks[traversal].isoDay), day)) {\n                    tmp.push(\n                        <div key={parseISO(tasks[traversal].isoDay) + tasks[traversal].text}>\n                        <span\n                            //onClick = { () => 'activeDate'}\n                        >\n                            {tasks[traversal].text}\n                        </span>\n                            <span style={{color: TaskToCalendarColoring(tasks, traversal)}}>\n                            {formatISO9075(parseISO(tasks[traversal].isoDay), {representation: 'time'}).slice(0, -3)}\n                        </span>\n                        </div>)\n                }\n\n                traversal++\n            }\n            return {storageArray: tmp}\n        }\n\n        while (day <= endDate) {   // Guarantees that loop runs for entirety of month\n            // For each iteration, push a single cell into days array\n            for (let i = 0; i < 7; i++) {\n                formattedDate = format(day, dateFormat);\n                const cloneDay = day;\n\n                // For each DAY, sweep through the tasks array ONCE ENTIRELY\n                const {storageArray} = TaskToCalendar(tasks, traversal, day)\n                traversal = 0   // RESET the modified traversal value\n\n                days.push(\n                    <div\n                        className={`column cell ${!isSameMonth(day, monthStart)    // Checking if each cell actually belongs to the current Month\n                            ? \"disabled\" :\n                            isSameDay(day, currentDate) ? \"flashy\" :\n                                isSameDay(day, selectedDate) ? \"selected\" : \"\"}`}  // Checking if particular cell is same date as currentDate\n                        key={day}\n                        onClick={() => onDateClick(toDate(cloneDay))}              // sets currentDate hook to whatever cell is being clicked on\n                    >\n                        <span className=\"number\">{formattedDate}</span>\n                        <span className=\"bg\">{formattedDate}</span>\n                        {storageArray}\n                    </div>\n                );\n                day = addDays(day, 1);     // Increment to next day\n            }\n\n            // Push the entire days array (as a single div) into rows array\n            rows.push(\n                <div className=\"row\" key={day}> {days} </div>\n            );\n\n            // Clear the days array to start over for the next week (next 7 days)\n            days = [];\n        }\n        // Once while loop is done, return the full rows array as single div\n        return <div className=\"body\">{rows}</div>;\n    }\n\n    // Rendering\n    return (\n        <div className=\"calendar\">\n            <div>{header()}</div>\n            <div>{days()}</div>\n            <div>{cells()}</div>\n        </div>\n    );\n};\nexport default Calendar;",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":16,"nodeType":"54","messageId":"55","endLine":1,"endColumn":25},{"ruleId":"52","severity":1,"message":"56","line":24,"column":11,"nodeType":"54","messageId":"55","endLine":24,"endColumn":22},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'toggleClass' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]